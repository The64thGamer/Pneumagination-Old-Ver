[gd_resource type="VisualShader" load_steps=4 format=3 uid="uid://dpf0evem4mly8"]

[sub_resource type="VisualShaderNodeTextureParameterTriplanar" id="VisualShaderNodeTextureParameterTriplanar_6vx7h"]
output_port_for_preview = 0
parameter_name = "TextureParameterTriplanar"

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_rk51u"]
source = 5

[sub_resource type="VisualShaderNodeWorldPositionFromDepth" id="VisualShaderNodeWorldPositionFromDepth_rpon4"]

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx;

uniform sampler2D depth_tex_frg_4 : hint_depth_texture, repeat_disable, filter_nearest;
uniform sampler2D TextureParameterTriplanar;


// TextureParameterTriplanar
	vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
		vec4 samp = vec4(0.0);
		samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
		samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
		samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
		return samp;
	}

	uniform vec3 triplanar_scale = vec3(1.0, 1.0, 1.0);
	uniform vec3 triplanar_offset;
	uniform float triplanar_sharpness = 0.5;

	varying vec3 triplanar_power_normal;
	varying vec3 triplanar_pos;

void vertex() {
// TextureParameterTriplanar
	{
		triplanar_power_normal = pow(abs(NORMAL), vec3(triplanar_sharpness));
		triplanar_power_normal /= dot(triplanar_power_normal, vec3(1.0));
		triplanar_pos = VERTEX * triplanar_scale + triplanar_offset;
		triplanar_pos *= vec3(1.0, -1.0, 1.0);
	}
}

void fragment() {
	vec3 n_out4p0;
// WorldPositionFromDepth:4
	{
		float __log_depth = textureLod(depth_tex_frg_4, SCREEN_UV, 0.0).x;
	vec4 __depth_view = INV_PROJECTION_MATRIX * vec4(SCREEN_UV * 2.0 - 1.0, __log_depth, 1.0);
		__depth_view.xyz /= __depth_view.w;
		n_out4p0 = (INV_VIEW_MATRIX * __depth_view).xyz;
	}


// TextureParameterTriplanar:2
	vec4 n_out2p0 = triplanar_texture(TextureParameterTriplanar, triplanar_power_normal, n_out4p0);


	vec4 n_out3p0;
// Texture2D:3
	n_out3p0 = texture(TextureParameterTriplanar, UV);


// Output:0
	ALBEDO = vec3(n_out3p0.xyz);


}
"
graph_offset = Vector2(-515.829, 106.252)
nodes/fragment/2/node = SubResource("VisualShaderNodeTextureParameterTriplanar_6vx7h")
nodes/fragment/2/position = Vector2(-300, 160)
nodes/fragment/3/node = SubResource("VisualShaderNodeTexture_rk51u")
nodes/fragment/3/position = Vector2(90.0297, 230.626)
nodes/fragment/4/node = SubResource("VisualShaderNodeWorldPositionFromDepth_rpon4")
nodes/fragment/4/position = Vector2(-700, 380)
nodes/fragment/connections = PackedInt32Array(2, 1, 3, 2, 3, 0, 0, 0, 4, 0, 2, 1)
