#pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
//#pragma enable_d3d11_debug_symbols

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/Runtime/Lighting/ProbeVolume/ProbeVolume.hlsl"
#include "Packages/com.unity.render-pipelines.core/Runtime/Lighting/ProbeVolume/ProbeReferenceVolume.Streaming.cs.hlsl"

#pragma kernel UploadData

#pragma multi_compile_local _ PROBE_VOLUMES_L2
#pragma multi_compile_local _ PROBE_VOLUMES_SHARED_DATA

RWTexture3D<float4> _Out_L0_L1Rx;
RWTexture3D<float4> _Out_L1G_L1Ry;
RWTexture3D<float4> _Out_L1B_L1Rz;

#ifdef PROBE_VOLUMES_SHARED_DATA
RWTexture3D<float> _Out_Shared;
#endif


#ifdef PROBE_VOLUMES_L2
RWTexture3D<float4> _Out_L2_0;
RWTexture3D<float4> _Out_L2_1;
RWTexture3D<float4> _Out_L2_2;
RWTexture3D<float4> _Out_L2_3;
#endif

ByteAddressBuffer _ScratchBuffer;

float4 UintToFloat4(uint input)
{
    float4 result;
    result.x = (input & 0x000000FF) / 255.0f;
    result.y = ((input >> 8) & 0x000000FF) / 255.0f;
    result.z = ((input >> 16) & 0x000000FF) / 255.0f;
    result.w = ((input >> 24) & 0x000000FF) / 255.0f;

    return result;
}

// Extract two FP16 rgba values encoded in an uint4
void ExtractFP16(uint4 input, out float4 value0, out float4 value1)
{
    float4 temp0 = f16tof32(input);
    float4 temp1 = f16tof32(input >> 16);

    value0.xz = temp0.xy;
    value0.yw = temp1.xy;
    value1.xz = temp0.zw;
    value1.yw = temp1.zw;
}

void ExtractByte(uint4 input, out float4 value0, out float4 value1, out float4 value2, out float4 value3)
{
    value0 = UintToFloat4(input.x);
    value1 = UintToFloat4(input.y);
    value2 = UintToFloat4(input.z);
    value3 = UintToFloat4(input.w);
}

void ExtractByte(uint input, out float4 value)
{
    value = UintToFloat4(input);
}

[numthreads(64, 1, 1)]
void UploadData(uint3 dispatchThreadID : SV_DispatchThreadID)
{
    uint chunkIndex = dispatchThreadID.z;
    uint chunkProbeIndex = dispatchThreadID.x * 4; // One thread processes 4 probes.

    uint offsetL0_L1Rx = _L0L1rxOffset + chunkIndex * _L0Size + chunkProbeIndex * _L0ProbeSize; // 4 x 8 bytes probes.
    uint offsetL1G_L1Ry = _L1GryOffset + chunkIndex * _L1Size + chunkProbeIndex * _L1ProbeSize; // 4 x 4 bytes probes.
    uint offsetL1B_L1Rz = _L1BrzOffset + chunkIndex * _L1Size + chunkProbeIndex * _L1ProbeSize; // 4 x 4 bytes probes.
    uint offsetShared = _SharedOffset + chunkIndex * _SharedSize + chunkProbeIndex * _SharedProbeSize; // 4 x 1 bytes probes.

    // We extract 4 probes at a time.
    // This is driven by the minimum amount of data that we can load at once with a ByteAddressBuffer
    // Shared data is currently 1 byte per probe so we can load at minimum 4 probes at a time with one ByteAddressBuffer.Load(uint)

    // Extract L0L1Rx (fp16 encoded)
    // 1 probe == 8 bytes => 2x2 probes encoded in 2x4 uint
    float4 L0_L1Rx_probe_0, L0_L1Rx_probe_1, L0_L1Rx_probe_2, L0_L1Rx_probe_3;
    ExtractFP16(_ScratchBuffer.Load4(offsetL0_L1Rx), L0_L1Rx_probe_0, L0_L1Rx_probe_1);
    ExtractFP16(_ScratchBuffer.Load4(offsetL0_L1Rx + 16), L0_L1Rx_probe_2, L0_L1Rx_probe_3);

    // Extract L1
    // 1 probe == 4 bytes => 4 probes encoded in 4 uint (x2, once for each L1 texture)
    float4 L1G_L1Ry_probe_0, L1G_L1Ry_probe_1, L1G_L1Ry_probe_2, L1G_L1Ry_probe_3;
    ExtractByte(_ScratchBuffer.Load4(offsetL1G_L1Ry), L1G_L1Ry_probe_0, L1G_L1Ry_probe_1, L1G_L1Ry_probe_2, L1G_L1Ry_probe_3);
    float4 L1B_L1Rz_probe_0, L1B_L1Rz_probe_1, L1B_L1Rz_probe_2, L1B_L1Rz_probe_3;
    ExtractByte(_ScratchBuffer.Load4(offsetL1B_L1Rz), L1B_L1Rz_probe_0, L1B_L1Rz_probe_1, L1B_L1Rz_probe_2, L1B_L1Rz_probe_3);

#ifdef PROBE_VOLUMES_SHARED_DATA
    // Extract Shared Data. 1 probe == 1 byte => 4 probes encoded in 1 uint
    float4 shared_probe_0_3;
    ExtractByte(_ScratchBuffer.Load(offsetShared), shared_probe_0_3);
#endif

#ifdef PROBE_VOLUMES_L2
    uint offsetL2_0 = _L2_0Offset + chunkIndex * _L2Size + chunkProbeIndex * _L2ProbeSize; // 4 x 4 bytes probes.
    uint offsetL2_1 = _L2_1Offset + chunkIndex * _L2Size + chunkProbeIndex * _L2ProbeSize; // 4 x 4 bytes probes.
    uint offsetL2_2 = _L2_2Offset + chunkIndex * _L2Size + chunkProbeIndex * _L2ProbeSize; // 4 x 4 bytes probes.
    uint offsetL2_3 = _L2_3Offset + chunkIndex * _L2Size + chunkProbeIndex * _L2ProbeSize; // 4 x 4 bytes probes.

    // Extract L2
    float4 L2_0_probe_0, L2_0_probe_1, L2_0_probe_2, L2_0_probe_3;
    float4 L2_1_probe_0, L2_1_probe_1, L2_1_probe_2, L2_1_probe_3;
    float4 L2_2_probe_0, L2_2_probe_1, L2_2_probe_2, L2_2_probe_3;
    float4 L2_3_probe_0, L2_3_probe_1, L2_3_probe_2, L2_3_probe_3;
    ExtractByte(_ScratchBuffer.Load4(offsetL2_0), L2_0_probe_0, L2_0_probe_1, L2_0_probe_2, L2_0_probe_3);
    ExtractByte(_ScratchBuffer.Load4(offsetL2_1), L2_1_probe_0, L2_1_probe_1, L2_1_probe_2, L2_1_probe_3);
    ExtractByte(_ScratchBuffer.Load4(offsetL2_2), L2_2_probe_0, L2_2_probe_1, L2_2_probe_2, L2_2_probe_3);
    ExtractByte(_ScratchBuffer.Load4(offsetL2_3), L2_3_probe_0, L2_3_probe_1, L2_3_probe_2, L2_3_probe_3);
#endif

    APVResourcesRW output;
    LOAD_APV_RES(output, _Out);

    uint3 baseProbe;
    baseProbe.z = chunkProbeIndex / _ProbeCountInChunkSlice;
    uint indexInSlice = chunkProbeIndex - baseProbe.z * _ProbeCountInChunkSlice;
    baseProbe.y = indexInSlice / _ProbeCountInChunkLine;
    baseProbe.x = indexInSlice - baseProbe.y * _ProbeCountInChunkLine;

    uint3 dstChunk = _ScratchBuffer.Load4(chunkIndex * 16).xyz; // *16 because 4 int per chunk.
    uint3 loc = dstChunk + baseProbe;
    uint3 probe1Offset = uint3(1, 0, 0);
    uint3 probe2Offset = uint3(2, 0, 0);
    uint3 probe3Offset = uint3(3, 0, 0);

#ifdef PROBE_VOLUMES_SHARED_DATA
    uint3 sharedDstChunk = _ScratchBuffer.Load4(_SharedDestChunksOffset + chunkIndex * 16).xyz; // *16 because 4 int per chunk.
    uint3 sharedLoc = sharedDstChunk + baseProbe;
#endif

    _Out_L0_L1Rx[loc] = L0_L1Rx_probe_0;
    _Out_L0_L1Rx[loc + probe1Offset] = L0_L1Rx_probe_1;
    _Out_L0_L1Rx[loc + probe2Offset] = L0_L1Rx_probe_2;
    _Out_L0_L1Rx[loc + probe3Offset] = L0_L1Rx_probe_3;

    _Out_L1G_L1Ry[loc] = L1G_L1Ry_probe_0;
    _Out_L1G_L1Ry[loc + probe1Offset] = L1G_L1Ry_probe_1;
    _Out_L1G_L1Ry[loc + probe2Offset] = L1G_L1Ry_probe_2;
    _Out_L1G_L1Ry[loc + probe3Offset] = L1G_L1Ry_probe_3;

    _Out_L1B_L1Rz[loc] = L1B_L1Rz_probe_0;
    _Out_L1B_L1Rz[loc + probe1Offset] = L1B_L1Rz_probe_1;
    _Out_L1B_L1Rz[loc + probe2Offset] = L1B_L1Rz_probe_2;
    _Out_L1B_L1Rz[loc + probe3Offset] = L1B_L1Rz_probe_3;

#ifdef PROBE_VOLUMES_SHARED_DATA
    _Out_Shared[sharedLoc] = shared_probe_0_3.x;
    _Out_Shared[sharedLoc + probe1Offset] = shared_probe_0_3.y;
    _Out_Shared[sharedLoc + probe2Offset] = shared_probe_0_3.z;
    _Out_Shared[sharedLoc + probe3Offset] = shared_probe_0_3.w;
#endif

#ifdef PROBE_VOLUMES_L2
    _Out_L2_0[loc] = L2_0_probe_0;
    _Out_L2_0[loc + probe1Offset] = L2_0_probe_1;
    _Out_L2_0[loc + probe2Offset] = L2_0_probe_2;
    _Out_L2_0[loc + probe3Offset] = L2_0_probe_3;

    _Out_L2_1[loc] = L2_1_probe_0;
    _Out_L2_1[loc + probe1Offset] = L2_1_probe_1;
    _Out_L2_1[loc + probe2Offset] = L2_1_probe_2;
    _Out_L2_1[loc + probe3Offset] = L2_1_probe_3;

    _Out_L2_2[loc] = L2_2_probe_0;
    _Out_L2_2[loc + probe1Offset] = L2_2_probe_1;
    _Out_L2_2[loc + probe2Offset] = L2_2_probe_2;
    _Out_L2_2[loc + probe3Offset] = L2_2_probe_3;

    _Out_L2_3[loc] = L2_3_probe_0;
    _Out_L2_3[loc + probe1Offset] = L2_3_probe_1;
    _Out_L2_3[loc + probe2Offset] = L2_3_probe_2;
    _Out_L2_3[loc + probe3Offset] = L2_3_probe_3;
#endif
}
