
#include "../../GlobalDefines.cginc"
#include "UnityCG.cginc"
#define PI 3.14159
#define gHistoryFixFrameNum 12
// #define FasterSampling

float IndirectBoost;
bool DoUpscale;
bool UseReSTIRGI;

int screen_width;
int screen_height;
int PassNum;
int CurFrame;
int PartialRenderingFactor;

float CameraDist;
float gBlurRadius;

#ifdef FasterSampling
    static const float3 SamplePoissionDisk6[ 6 ] =
    {//From Nvidia ReBLUR
        // https://www.desmos.com/calculator/e5mttzlg6v
        float3( -0.50 * sqrt(3.0) , -0.50             , exp(-0.66f * 1.0f) ),
        float3(  0.00             ,  1.00             , exp(-0.66f * 1.0f) ),
        float3(  0.50 * sqrt(3.0) , -0.50             , exp(-0.66f * 1.0f) ),
        float3(  0.00             , -0.30             , exp(-0.66f * 0.09f) ),
        float3(  0.15 * sqrt(3.0) ,  0.15             , exp(-0.66f * 0.09f) ),
        float3( -0.15 * sqrt(3.0) ,  0.15             , exp(-0.66f * 0.09f) ),
    };
    #define DiskSamples SamplePoissionDisk6
    #define DiskCount 6
#else
    static const float3 SamplePoissionDisk8[ 8 ] =
    {//From Nvidia ReBLUR
        // https://www.desmos.com/calculator/abaqyvswem
        float3( -1.00             ,  0.00             ,  exp(-0.66f * 1.0f)),
        float3( -0.25 * sqrt(2.0) ,  0.25 * sqrt(2.0) , exp(-0.66f * 0.25f) ),
        float3(  0.00             ,  1.00             , exp(-0.66f * 1.0f) ),
        float3(  0.25 * sqrt(2.0) , -0.25 * sqrt(2.0) , exp(-0.66f * 0.25f) ),
        float3(  1.00             ,  0.00             , exp(-0.66f * 1.0f)),
        float3(  0.25 * sqrt(2.0) ,  0.25 * sqrt(2.0) , exp(-0.66f * 0.25f)),
        float3(  0.00             , -1.00             , exp(-0.66f * 1.0f)),
        float3( -0.25 * sqrt(2.0) , -0.25 * sqrt(2.0) , exp(-0.66f * 0.25f))
    };
    #define DiskSamples SamplePoissionDisk8
    #define DiskCount 8
#endif

SamplerState my_linear_clamp_sampler;

#ifdef HDRP
    Texture2DArray<float2> TEX_PT_MOTION;
#else
    Texture2D<float2> TEX_PT_MOTION;
#endif

RWTexture2D<half> SSAOWrite;
Texture2D<half> SSAORead;

RWTexture2D<half4> Albedo;

RWTexture2D<uint2> NormA;
Texture2D<uint2> NormB;

RWTexture2D<half4> HFA;
Texture2D<half4> HFB;
Texture2D<half4> HFPrev;
RWTexture2D<half> HintsWrite;
Texture2D<half> HintsRead;

RWTexture2D<half> CurDepthWrite;
Texture2D<half> CurDepth;
Texture2D<half> PrevDepth;

RWTexture2D<float4> Output;

RWTexture2D<float4> DebugTex;

Texture2D<uint4> WorldPosData;

Texture2D<half4> ReservoirDataA;
Texture2D<half4> ReservoirDataB;

struct ColData {
    float3 throughput;
    float3 Direct;
    float3 Indirect;
    uint Fog;
    int IsSpecular;
    float Metallic;
};
StructuredBuffer<ColData> PerPixelRadiance;


Texture2D<float4> ScreenSpaceInfo;

float3 unpackRGBE(uint x)
{
    int exponent = int(x >> 27) - 20;
    float scale = pow(2, exponent) / 256.0;

    float3 v;
    v.r = float(x & 0x1ff) * scale;
    v.g = float((x >> 9) & 0x1ff) * scale;
    v.b = float((x >> 18) & 0x1ff) * scale;

    return v;
}

inline float2 msign(float2 v) {
    return (v>=0.0) ? 1.0 : -1.0; 
}

uint octahedral_32(float3 nor) {
    nor.xy /= ( abs( nor.x ) + abs( nor.y ) + abs( nor.z ) );
    nor.xy  = (nor.z >= 0.0) ? nor.xy : (1.0-abs(nor.yx))*msign(nor.xy);
    uint2 d = uint2(round(32767.5 + nor.xy*32767.5));  
    return d.x|(d.y<<16u);
}

float3 i_octahedral_32( uint data ) {
    uint2 iv = uint2( data, data>>16u ) & 65535u; 
    float2 v = float2(iv)/32767.5f - 1.0f;
    float3 nor = float3(v, 1.0f - abs(v.x) - abs(v.y)); // Rune Stubbe's version,
    float t = max(-nor.z,0.0);                     // much faster than original
    nor.x += (nor.x>0.0)?-t:t;                     // implementation of this
    nor.y += (nor.y>0.0)?-t:t;                     // technique
    return normalize( nor );
}



#pragma kernel ColorKernel


[numthreads(32,32,1)]
void ColorKernel (uint3 id : SV_DispatchThreadID)
{
    if(id.x > screen_width) return;
    int pixel_index = id.y * screen_width + id.x;
    const float3 Alb = Albedo[id.xy].xyz;
    const ColData Pixel = PerPixelRadiance[pixel_index];
    const float3 ScreenSpaceAlb = unpackRGBE(WorldPosData[id.xy].w);
    float3 Col = max((float)PartialRenderingFactor * (Pixel.Direct + Pixel.Indirect * IndirectBoost + unpackRGBE(Pixel.Fog) * ((Alb > 0.005f) ? rcp(Alb) : 0))* Alb * ((ScreenSpaceAlb > 0.001f) ? rcp(ScreenSpaceAlb) : 0),0);
    uint Input = asuint(Pixel.Metallic);
    HintsWrite[id.xy] = ((((Input >> 16) / 65535.0f) > 0.1f) ? ((Input & 0xFFFF) / 65535.0f) : 1);
    NormA[id.xy] = asuint(ScreenSpaceInfo[id.xy].xy);
    if(Albedo[id.xy].w == 0) Col = 0;
    else Albedo[id.xy] = float4(ScreenSpaceAlb, Albedo[id.xy].w);
    CurDepthWrite[id.xy] = ScreenSpaceInfo[id.xy].z;
    HFA[id.xy] = float4(clamp(Col,0,999999.0f) ,0);
}

#pragma kernel BlurKernel

uint hash_with(uint seed, uint hash) {
    // Wang hash
    seed = (seed ^ 61) ^ hash;
    seed += seed << 3;
    seed ^= seed >> 4;
    seed *= 0x27d4eb2d;
    return seed;
}
uint pcg_hash(uint seed) {
    uint state = seed * 747796405u + 2891336453u;
    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    return (word >> 22u) ^ word;
}

float2 random(uint samdim, int2 id) {
    uint hash = pcg_hash(((id.x + id.y * screen_width) * (uint)112 + samdim));

    const static float one_over_max_unsigned = asfloat(0x2f7fffff);


    float x = hash_with(CurFrame, hash) * one_over_max_unsigned;
    float y = hash_with(CurFrame + 0xdeadbeef, hash) * one_over_max_unsigned;

    return float2(x, y);

}

inline float GetFadeBasedOnAccumulatedFrames( float accumSpeed )
{
    static const float a = gHistoryFixFrameNum * 2.0 / 3.0 + 1e-6;
    static const float b = gHistoryFixFrameNum * 4.0 / 3.0 + 2e-6;

    return smoothstep( a, b, accumSpeed );
}


inline float luminance(in float3 color)
{
    return dot(color, float3(0.299, 0.587, 0.114));
}

[numthreads(16,16,1)]
void BlurKernel (uint3 id : SV_DispatchThreadID)
{
    float CenterDepth = CurDepth[id.xy];
    float3 CentNorm = i_octahedral_32(NormB[id.xy].y);
    float4 Center = HFB[id.xy];
    int AccumFrames = Center.w;
    float CenterLum = luminance(Center);
    float sum_w = 1;

    float angle = random(53, id.xy).x * 2.0f * PI;
    float2 angs = float2(cos(angle), sin(angle));
    const float2x2 rotationMatrix = float2x2(angs.xy, -angs.y, angs.x);

    float boost = 1.0f - smoothstep(8.0f+1e-6, 16.0f+2e-6, AccumFrames);

    float blurRadius = gBlurRadius * ( 1.0 + 2.0 * boost ) / 3.0;

    float SSAOMin = SSAORead[id.xy];
    for(int j = -1; j <= 1; j++) {
        for(int k = -1; k <= 1; k++) {
            if(j == 0 && k == 0) continue;
            SSAOMin = min(SSAOMin, SSAORead[id.xy + int2(j, k)]);
        }
    }
    const float Hints = HintsRead[id.xy];
    if(Hints == 1) blurRadius *= lerp(0.1f, 1.0f, SSAOMin);
    if(Hints > 0.05f && Hints < 0.4f) blurRadius *= Hints;
    blurRadius += 1.0;

    float2 BlurRadius = blurRadius * rcp(float2(screen_width, screen_height));

    float2 uv = (id.xy + 0.5f) / (float2(screen_width, screen_height));
    uv += (random(64, id.xy) - 0.5f) * rcp(float2(screen_width, screen_height));//jitter

    [unroll]for(int i = 0; i < DiskCount; i++) {
        float3 offset = DiskSamples[i];
        float w = offset.z;
        float2 uvoffset = mul(rotationMatrix, offset.xy) * BlurRadius;
        
        float2 OffsetUV = uv + uvoffset;
        if(any(OffsetUV > 1 || OffsetUV < 0)) continue;

        float sampleDepth = CurDepth.SampleLevel(my_linear_clamp_sampler, OffsetUV, 0);
        float3 norm = i_octahedral_32(NormB[OffsetUV * float2(screen_width, screen_height)].y);
        float4 Sample = HFB.SampleLevel(my_linear_clamp_sampler, OffsetUV, 0);

        float DepthFactor = exp2((AccumFrames > 7 ? -100.0f : -10.0f) * abs(1.0f - (CenterDepth / sampleDepth)));//bunch of arbitrary values I found through trial and error
        float NormFactor = AccumFrames > 2 ? pow(max(0, dot(CentNorm, norm)),64) : pow(max(0, dot(i_octahedral_32(NormB[id.xy].x), i_octahedral_32(NormB[OffsetUV * float2(screen_width, screen_height)].x))),3);
        w *= clamp(NormFactor * DepthFactor,0, 1);

        if(AccumFrames > 4) w *= pow(exp(-abs(CenterLum - luminance(Sample.xyz)) / (PassNum == 2 ? 4.0f : 1.0f)),max((min(Sample.w - 4, 4)) / (1.0f + CenterLum * 4.0f), 1));

        Center +=  Sample * w;
        sum_w += w;
    }
    if(sum_w != 0) Center *= rcp(sum_w);

    HFA[id.xy] = float4(Center.xyz, AccumFrames);
}


Texture2D<half2> Gradients;
#pragma kernel temporal

[numthreads(8,8,1)]
void temporal (uint3 id : SV_DispatchThreadID)
{

    #ifdef HDRP
        float2 motion = -TEX_PT_MOTION.SampleLevel(my_linear_clamp_sampler, int3(id.xy,0) / float3(screen_width, screen_height, 1), 0).xy;
    #else
        float2 motion = -TEX_PT_MOTION.SampleLevel(my_linear_clamp_sampler, id.xy / float2(screen_width, screen_height), 0).xy;
    #endif

    float2 pos_prev = ((((float2(id.xy)+0.5f) * float2(rcp(screen_width), rcp(screen_height)) + motion) * float2(screen_width, screen_height)));

    float depth_curr = CurDepth[id.xy];

    float sampleDepth;// = PrevDepth[pos_prev];

    float3 normal_curr = i_octahedral_32(NormA[id.xy].x);

    bool temporal_sample_valid_diff = false;
    float4 temporal_color_hf = 0;
    float temporal_sum_w_diff = 0.0;

    float2 pos_ld = floor(pos_prev - 0.5);
    float2 subpix = frac(pos_prev - 0.5 - pos_ld);
    {

        // Bilinear/bilateral filter
        static const int2 off[4] = { { 0, 0 }, { 1, 0 }, { 0, 1 }, { 1, 1 } };
        const float w[4] = {
            (1.0 - subpix.x) * (1.0 - subpix.y),
            (subpix.x) * (1.0 - subpix.y),
            (1.0 - subpix.x) * (subpix.y),
            (subpix.x) * (subpix.y)
        };
        [unroll]for (int i = 0; i < 4; i++) {
            int2 p = int2(pos_ld)+off[i];

            if (p.x < 0 || p.x >= screen_width || p.y >= screen_height) {
                continue;
            }

            float depth_prev =  PrevDepth[p];
            float3  normal_prev = i_octahedral_32(NormB[p].x);
            

            float dist_depth = (abs(depth_curr - depth_prev) - CameraDist) / abs(depth_curr);
            float dot_normals = dot(normal_curr, normal_prev);
        
                if (dist_depth < 0.1 && dot_normals > 0.8)
                {
                    float w_diff = w[i] * max(dot_normals, 0);// * clamp(exp2(-abs(CenterLum - luminance(HFPrev[p].xyz))),0.0f,1);

                    temporal_color_hf += HFPrev[p] * w_diff;
                    temporal_sum_w_diff += w_diff;
                }
                //  else {
                //      float normframe = saturate(HFPrev.SampleLevel(my_linear_clamp_sampler, p / float2(screen_width, screen_height), 0).w / 4.0f);
                //     if(normframe == 1.0f) continue;
                //     uint mip_level = 4.0 * (1.0f - normframe);

                //     temporal_color_hf += HFPrev.SampleLevel(my_linear_clamp_sampler, p / float2(screen_width, screen_height), mip_level + 2) * w[i];
                //     temporal_sum_w_diff += w[i];// * max(dot_normals, 0);
                // }

        }

        // We found some relevant surfaces - good
        if (temporal_sum_w_diff > 1e-6)
        {
            float inv_w_diff = 1.0 / temporal_sum_w_diff;
            temporal_color_hf *= inv_w_diff;
            temporal_sample_valid_diff = true;
        }

    }

    int AccumFrames = min(temporal_color_hf.w,12);

    // [branch]if(UseReSTIRGI) {
    //     for(int i = -2; i <= 2; i++) {
    //         for(int j = -2; j <= 2; j++) {
    //             if((ReservoirDataB[pos_prev + int2(i, j) * 2].x+1.0f) / (ReservoirDataA[id.xy + int2(i, j) * 2].x+1) > 1.0f) {
    //                 AccumFrames *= 0.8f;
    //             }
    //         }
    //     }
    // }
    if(UseReSTIRGI) AccumFrames *= pow(1.0 - clamp(Gradients[id.xy / 3].x,0,1), 10);
    if(!temporal_sample_valid_diff) AccumFrames = 0;

    AccumFrames++;

    // float3 CenterCol = HFA[id.xy].xyz;
    // int Valids = 1;
    // for(int i = -PartialRenderingFactor; i <= PartialRenderingFactor; i++) {
    //     for(int j = -PartialRenderingFactor; j <= PartialRenderingFactor; j++) {
    //         if(i == 0 && j == 0) continue;
    //         int2 OffsetID = id.xy + int2(i,j);
    //         // if(any(HFA[OffsetID].xyz) > 0.001f) {
    //             CenterCol += HFA[OffsetID].xyz;
    //             Valids++;
    //         // }
    //     }
    // }
    // CenterCol /= (float)Valids;

    float3 col = lerp(temporal_color_hf, HFA[id.xy].xyz, rcp(AccumFrames));

    HFA[id.xy] = float4(col, AccumFrames);
}




#pragma kernel secondarytemporal

[numthreads(16,16,1)]
void secondarytemporal (uint3 id : SV_DispatchThreadID)
{

    #ifdef HDRP
        float2 motion = -TEX_PT_MOTION.SampleLevel(my_linear_clamp_sampler, int3(id.xy,0) / float3(screen_width, screen_height, 1), 0).xy;
    #else
        float2 motion = -TEX_PT_MOTION.SampleLevel(my_linear_clamp_sampler, id.xy / float2(screen_width, screen_height), 0).xy;
    #endif

    float2 pos_prev = ((((float2(id.xy)+0.5f) * float2(rcp(screen_width), rcp(screen_height)) + motion) * float2(screen_width, screen_height)));

    float3 Center = HFB[id.xy];
    float depth_curr = CurDepth[id.xy];
    float3 normal_curr = i_octahedral_32(NormA[id.xy].x);
    float3 MaxLum = -9999.0f;
    float3 MinLum = 9999.0f;
    [unroll]for(int i = -1; i <= 1; i++) {
        [unroll]for(int j = -1; j <= 1; j++) {
            if(i == 0 && j == 0) continue;
            float3 Lum = min(HFB[id.xy + int2(i, j) * 2.0f].xyz, HFB[id.xy + int2(i, j) * 4.0f].xyz);
            MaxLum = max(Lum, MaxLum);
            MinLum = min(Lum, MinLum);
        }   
    }
    float CentLum = luminance(Center);
    float newLum = clamp(CentLum, luminance(MinLum), luminance(MaxLum));
    if(CentLum != 0) Center *= newLum / CentLum;
    else Center = MinLum;


    bool temporal_sample_valid_diff = false;
    float4 temporal_color_hf = 0;
    float temporal_sum_w_diff = 0.0;

    float2 pos_ld = floor(pos_prev - 0.5);
    float2 subpix = frac(pos_prev - 0.5 - pos_ld);
    {

        // Bilinear/bilateral filter
        static const int2 off[4] = { { 0, 0 }, { 1, 0 }, { 0, 1 }, { 1, 1 } };
        const float w[4] = {
            (1.0 - subpix.x) * (1.0 - subpix.y),
            (subpix.x) * (1.0 - subpix.y),
            (1.0 - subpix.x) * (subpix.y),
            (subpix.x) * (subpix.y)
        };
        [unroll]for (int i = 0; i < 4; i++) {
            int2 p = int2(pos_ld)+off[i];

            if (p.x < 0 || p.x >= screen_width || p.y >= screen_height)
                continue;

            float depth_prev =  PrevDepth[p];
            float3  normal_prev = i_octahedral_32(NormB[p].x);
            

            float dist_depth = (abs(depth_curr - depth_prev) - CameraDist) / abs(depth_curr);
            float dot_normals = dot(normal_curr, normal_prev);

        
                if (dist_depth < 0.1 && dot_normals > 0.8)
                {
                    float w_diff = w[i] * max(dot_normals, 0);

                   temporal_color_hf += HFPrev[p] * w_diff;
                    temporal_sum_w_diff += w_diff;
                }
                //  else {
                //      float normframe = saturate(HFPrev.SampleLevel(my_linear_clamp_sampler, p / float2(screen_width, screen_height), 0).w / 4.0f);
                //     if(normframe == 1.0f) continue;
                //     uint mip_level = 4.0 * (1.0f - normframe);

                //     temporal_color_hf += float4(HFPrev.SampleLevel(my_linear_clamp_sampler, p / float2(screen_width, screen_height), mip_level + 2).xyz * w[i] * max(dot_normals, 0),0);
                //     temporal_sum_w_diff += w[i] * max(dot_normals, 0);
                // }

        }

        // We found some relevant surfaces - good
        if (temporal_sum_w_diff > 1e-6)
        {
            float inv_w_diff = 1.0 / temporal_sum_w_diff;
            temporal_color_hf *= inv_w_diff;
            temporal_sample_valid_diff = true;
        }

    }


    float4 AlbedoVal = Albedo[id.xy];
    float AccumFrames = min(HFPrev[pos_prev].w,60);
    if(!temporal_sample_valid_diff || any(pos_prev < 0 || pos_prev > float2(screen_width, screen_height))) AccumFrames = 0;

    if(UseReSTIRGI) AccumFrames *= pow(1.0 - clamp(Gradients[id.xy / 3].x,0,1), 10);
    else if(AccumFrames > 10) AccumFrames *= lerp(0.1f, 1, pow(exp2(-abs(luminance((temporal_color_hf)) - luminance((Center)))),1));
    // [branch]if(UseReSTIRGI) {
    //     for(int i = -1; i <= 1; i++) {
    //         for(int j = -1; j <= 1; j++) {
    //             if((ReservoirDataB[pos_prev + int2(i, j) * 2].x+1.0f) / (ReservoirDataA[id.xy + int2(i, j) * 2].x+1) > 1.5f) {
    //                 AccumFrames *= 0.8f;
    //             }
    //         }
    //     }
    // }

    AccumFrames++;
    Center = lerp(temporal_color_hf, Center, min(rcp(AccumFrames),1));
    HFA[id.xy] = float4(Center, AccumFrames);
    if(AlbedoVal.w == 0) Output[id.xy] = AlbedoVal;
    else Output[id.xy] = float4(Center * (DoUpscale ? 1.0f : AlbedoVal.xyz), 1);
}

#pragma kernel SSAO

float2 sample_disc(float u1, float u2) {
    float a = 2.0f * u1 - 1.0f;
    float b = 2.0f * u2 - 1.0f;
    if (a == 0.0f) a = 0.00001;
    if (b == 0.0f) b = 0.00001;

    float phi, r;
    if (a * a > b * b) {
        r = a;
        phi = (0.25f * PI) * (b / a);
    }
    else {
        r = b;
        phi = (0.25f * PI) * (a / b) + (0.5f * PI);
    }

    float sin_phi, cos_phi;
    sincos(phi, sin_phi, cos_phi);

    return float2(r * cos_phi, r * sin_phi);
}

float3 sample_cosine_weighted_direction(float u1, float u2) {
    float2 d = sample_disc(u1, u2);
    return float3(d.x, d.y, sqrt(abs(1.0f - dot(d, d))));
}

float3x3 GetTangentSpace(float3 normal) {
    // Choose a helper floattor for the cross product
    float3 helper = float3(1, 0, 0);
    if (abs(normal.x) > 0.99f)
        helper = float3(0, 0, 1);

    // Generate floattors
    float3 tangent = normalize(cross(normal, helper));
    float3 binormal = cross(normal, tangent);

    return float3x3(tangent, binormal, normal);
}

float4x4 ViewProj;
float4x4 CamInvProj;
float4x4 CameraToWorld;

float3 CreateCameraRay(float2 uv, out float3 origin) {
    // Transform the camera origin to world space
    origin = mul(CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

    // Invert the perspective projection of the view-space position
    float3 direction = mul(CamInvProj, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    return direction;
}

[numthreads(16,16,1)]
void SSAO (uint3 id : SV_DispatchThreadID)
{
    const float3x3 NormTan = GetTangentSpace(i_octahedral_32(NormB[id.xy].x));
    float3 Origin;
    float2 uv = id.xy / float2(screen_width, screen_height);
    float Depth = CurDepth.SampleLevel(my_linear_clamp_sampler, uv, 0);
    float3 Dir = CreateCameraRay(uv * 2.0f - 1.0f, Origin);
    float3 CentPos = Dir * Depth + Origin;
    float3 MainPos = 0;
    float Falses = 0;
    [unroll]for(int i = 0; i < 3; i++) {
        MainPos = CentPos;
        float2 rand = random(53 + i, id.xy);
        float3 direction = normalize(mul(sample_cosine_weighted_direction(rand.x,rand.y), NormTan)) * 0.1f;
        MainPos += direction * random(43 + i, id.xy).x * 0.1f;
        [unroll]for(int j = 0; j < 6; j++) {
            MainPos += direction * clamp(pow((j + 1) / 6.0f,2), 0, 1);
            float4 curprojectedrefl = mul(ViewProj, float4(MainPos, 1));
            float2 UV = (curprojectedrefl.xy / curprojectedrefl.w * 0.5f + 0.5f);
            if(any(UV > 1 || UV < 0)) break;
            Depth = length(MainPos - Origin);
            float depthdiff = Depth - CurDepth.SampleLevel(my_linear_clamp_sampler, UV, 0);
            if(depthdiff >= 0 && depthdiff < 0.4f) {
                Falses += smoothstep(0.4f, 0, depthdiff);//1.0f;
                break;
            }
        }
    }

    SSAOWrite[id.xy] = pow(1.0f - Falses / 3.0f,2);
}

#pragma kernel SSAOFilter
[numthreads(8,8,1)]
void SSAOFilter (uint3 id : SV_DispatchThreadID)
{
    float3 CentNorm = i_octahedral_32(NormB[id.xy]);
    float CentDepth = CurDepth[id.xy];

    float SSAOAccum = SSAORead[id.xy];
    float wsum = 1;
    for(int i = -1; i <= 1; i++) {
        for(int j = -1; j <= 1; j++) {
            if(i == 0 && j == 0) continue;
            int2 OffsetIndex = id.xy + int2(i,j) * 2.0f;
            float DepthFactor = exp2(-200.0f * abs(1.0f - (CentDepth / CurDepth[OffsetIndex])));
            float NormFactor = max(0, dot(CentNorm, i_octahedral_32(NormB[OffsetIndex])));
            NormFactor *= NormFactor;
            NormFactor *= NormFactor;
            float w = DepthFactor * NormFactor;
            SSAOAccum += SSAORead[OffsetIndex] * w;
            wsum += w;
        }
    }
    SSAOWrite[id.xy] = SSAOAccum / max(wsum, 1e-5);

}

#pragma kernel Gradient_Atrous

int iteration;

static const float wavelet_factor = 0.5;
static const float wavelet_kernel[2][2] = {
    { 1.0, wavelet_factor  },
    { wavelet_factor, wavelet_factor * wavelet_factor }
};

#define GRAD_DWN 3
inline float2 filter_image(Texture2D<half2> img, int2 ipos)
{
    int2 grad_size = int2(screen_width, screen_height) / GRAD_DWN;

    float2 color_center = img[ipos].xy;

    float sum_w = 1;

    const int step_size = int(1u << iteration);

    float2 sum_color = 0;
    sum_w = 0;
    ipos += (random(64, ipos) - 0.5f);

    const int r = 1;
    for (int yy = -r; yy <= r; yy++) {
        for (int xx = -r; xx <= r; xx++) {
            int2 p = ipos + int2(xx, yy) * step_size;

            float2  c = img[p].xy;

            if (any((p >= grad_size)))
                c = 0;

            float w = wavelet_kernel[abs(xx)][abs(yy)];// / (float)step_size;

            sum_color += c * w;
            sum_w += w;
        }
    }
    sum_color /= sum_w;


    return sum_color;
}
RWTexture2D<half2> GradA;
Texture2D<half2> GradB;
[numthreads(16, 16, 1)]
void Gradient_Atrous(uint3 id : SV_DispatchThreadID)
{

    int2 ipos = id.xy;
    int2 grad_size = int2(screen_width, screen_height) / GRAD_DWN;
    if (any((ipos >= grad_size)))
        return;


    GradA[ipos] = filter_image(GradB, id.xy);

}