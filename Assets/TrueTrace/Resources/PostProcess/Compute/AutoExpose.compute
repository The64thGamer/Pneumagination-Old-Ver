#include "../../GlobalDefines.cginc"
#pragma kernel AutoExpose

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture2D<float4> InTex;
SamplerState sampler_InTex;

RWTexture2D<float4> OutTex;

RWStructuredBuffer<float> A;

uint screen_width;
uint screen_height;

const static float histogram_log_scale = 12.0f;
const static float histogram_log_zero = 220.0f;

float LuminanceAP1(float3 color) {
	return dot(color, float3(0.2722287168f, 0.6740817658f, 0.0536895174f));
}

int getBin(float L) {
	return clamp(int(log(L) * (histogram_log_scale)+(histogram_log_zero)), 0, 255);
}

float screenAverageLuma() {
	const uint tileSize = 256;
	uint2 gridSize = uint2(screen_width, screen_height) / tileSize;
	uint tileCount = gridSize.x * gridSize.y;
	const uint tileLod = int(log2(tileSize)) / 2;
	// Construct Luminance Histogram
	uint pdf[256];
	for (uint X = 0; X < 256; X++) {
		pdf[X] = 0;
	}
	for (uint tx = 0; tx <= gridSize.x; tx++) {
		for (uint ty = 0; ty <= gridSize.y; ty++) {
			float2 screenCoord = (float2(tx, ty) * tileSize + tileSize / 2) * (1.0f / float2(screen_width, screen_height));
			float3 scene = InTex.SampleLevel(sampler_InTex, screenCoord, tileLod).xyz;

			pdf[getBin(LuminanceAP1(scene) * 12.0f)] += 1;
		}
	}

	// Find median
	uint cumulative_density = 0;
	uint closest_bin_to_median = 0;
	float closest_dist_to_median = tileCount;
	for (uint X = 0; X < 256; X++) {
		cumulative_density += pdf[X];
		float dist = distance(tileCount / 2, cumulative_density); // m Is the Median of a RV iff CDF(m) = 0.5 (I dont normalize PDF so its tileCount/2 instead of 0.5)
		if (dist < closest_dist_to_median) {
			closest_bin_to_median = X;
			closest_dist_to_median = dist;
		}
	}

	return exp((float(closest_bin_to_median) - histogram_log_zero) / histogram_log_scale);

}
static float nightVision = 0.0f;
static float EXPOSURE_SPEED = 0.75f;
float frame_time;
float Exposure;
bool ExposureAuto;
float calculateAverageLuminance() {
	const float L_min = 0.00075;
	const float L_max = 50.0;
	const float exposureDecay = 0.05;
	const float exposureGrowth = 0.035;

	float eCurrent = clamp(A[0], 0.0f,50.0f);
	float L_median = screenAverageLuma();
	float keyVal = 1.5f - 2.0 / (2.0 + log10(L_median + 1.0)); // Keyvalue remap to preserve relative brightness of lighting in scenes 1.03
	float eTarget = keyVal * 2.15 / clamp(L_median, L_min, L_max);

	float speed = eTarget < eCurrent ? exposureDecay : exposureGrowth;

	return lerp(eCurrent, eTarget, clamp(speed * 2.0 * EXPOSURE_SPEED * (frame_time / 0.033),0,1));
}

[numthreads(1, 1, 1)]
void AutoExpose(uint3 id : SV_DispatchThreadID)
{
	// TODO: insert actual code here!

	A[0] = ((ExposureAuto) ? calculateAverageLuminance() : Exposure);
}


#pragma kernel AutoExposeFinalize

[numthreads(16, 16, 1)]
void AutoExposeFinalize(uint3 id : SV_DispatchThreadID)
{
	// TODO: insert actual code here!
	// if (id.x > screen_width || id.y > screen_height) return;
	OutTex[id.xy] = OutTex[id.xy] * A[0];
}