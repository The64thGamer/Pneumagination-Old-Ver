#include "../../GlobalDefines.cginc"
#pragma kernel Downsample
int screen_width;
int screen_height;
int TargetWidth;
int TargetHeight;
Texture2D<half4> InputTex;
SamplerState sampler_InputTex;
Texture2D<float4> OrigTex;
SamplerState sampler_OrigTex;
RWTexture2D<float4> OutputTex;

[numthreads(16, 16, 1)]
void Downsample(uint3 id : SV_DispatchThreadID)
{
	if (id.x > (uint)TargetWidth || id.y > (uint)TargetHeight) return;
	static float2 texel = 1.0f / float2(screen_width, screen_height);
	float2 UV = ((float2)id.xy + 0.5f) / float2(TargetWidth, TargetHeight);
	float3 filterSum = 0;
	float x = texel.x;
	float y = texel.y;
	float3 a = InputTex.SampleLevel(sampler_InputTex, float2(UV.x - 2 * x, UV.y + 2 * y), 0).rgb;
	float3 b = InputTex.SampleLevel(sampler_InputTex, float2(UV.x, UV.y + 2 * y), 0).rgb;
	float3 c = InputTex.SampleLevel(sampler_InputTex, float2(UV.x + 2 * x, UV.y + 2 * y), 0).rgb;

	float3 d = InputTex.SampleLevel(sampler_InputTex, float2(UV.x - 2 * x, UV.y), 0).rgb;
	float3 e = InputTex.SampleLevel(sampler_InputTex, float2(UV.x, UV.y), 0).rgb;
	float3 f = InputTex.SampleLevel(sampler_InputTex, float2(UV.x + 2 * x, UV.y), 0).rgb;

	float3 g = InputTex.SampleLevel(sampler_InputTex, float2(UV.x - 2 * x, UV.y - 2 * y), 0).rgb;
	float3 h = InputTex.SampleLevel(sampler_InputTex, float2(UV.x, UV.y - 2 * y), 0).rgb;
	float3 i = InputTex.SampleLevel(sampler_InputTex, float2(UV.x + 2 * x, UV.y - 2 * y), 0).rgb;

	float3 j = InputTex.SampleLevel(sampler_InputTex, float2(UV.x - x, UV.y + y), 0).rgb;
	float3 k = InputTex.SampleLevel(sampler_InputTex, float2(UV.x + x, UV.y + y), 0).rgb;
	float3 l = InputTex.SampleLevel(sampler_InputTex, float2(UV.x - x, UV.y - y), 0).rgb;
	float3 m = InputTex.SampleLevel(sampler_InputTex, float2(UV.x + x, UV.y - y), 0).rgb;

	float3 downsample = e * 0.173633;
	downsample += (a + c + g + i) * 0.0991668;
	downsample += (b + d + f + h) * 0.0744867;
	downsample += (j + k + l + m) * 0.0329382;
	OutputTex[id.xy] = float4(downsample, 1);
}
#pragma kernel LowPass

float luminance(float3 c)
{
	return dot(c, float3(0.299, 0.587, 0.114));
}

float3 karisAverage(float3 c1, float3 c2, float3 c3, float3 c4)
{
	float w1 = 1.0 / (luminance(c1.rgb) + 1.0);
	float w2 = 1.0 / (luminance(c2.rgb) + 1.0);
	float w3 = 1.0 / (luminance(c3.rgb) + 1.0);
	float w4 = 1.0 / (luminance(c4.rgb) + 1.0);

	return (c1 * w1 + c2 * w2 + c3 * w3 + c4 * w4) / (w1 + w2 + w3 + w4);
}

float3 QuadraticThreshold(float3 color, float threshold, float3 curve)
{
    // Pixel brightness
    float br = max(color.r, max(color.g, color.b));

    // Under-threshold part
    float rq = clamp(br - curve.x, 0.0, curve.y);
    rq = curve.z * rq * rq;

    // Combine and apply the brightness response curve
    color *= max(rq, br - threshold) / max(br, 1e-4);

    return color;
}

[numthreads(16, 16, 1)]
void LowPass(uint3 id : SV_DispatchThreadID)
{
	if (id.x > (uint)TargetWidth || id.y > (uint)TargetHeight) return;
	static float2 texel = 1.0f / float2(TargetWidth, TargetHeight);
	float2 UV = ((float2)id.xy + 0.5f) * texel;

	float3 samples[13];
	samples[0] = InputTex.SampleLevel(sampler_InputTex, UV + int2(-2, -2) * texel, 0).xyz;
	samples[1] = InputTex.SampleLevel(sampler_InputTex, UV + int2(0, -2) * texel, 0).xyz;
	samples[2] = InputTex.SampleLevel(sampler_InputTex, UV + int2(2, -2) * texel, 0).xyz;
	samples[3] = InputTex.SampleLevel(sampler_InputTex, UV + int2(-1, -1) * texel, 0).xyz;
	samples[4] = InputTex.SampleLevel(sampler_InputTex, UV + int2(1, -1) * texel, 0).xyz;
	samples[5] = InputTex.SampleLevel(sampler_InputTex, UV + int2(-2, 0) * texel, 0).xyz;
	samples[6] = InputTex.SampleLevel(sampler_InputTex, UV, 0).xyz;
	samples[7] = InputTex.SampleLevel(sampler_InputTex, UV + int2(2, 0) * texel, 0).xyz;
	samples[8] = InputTex.SampleLevel(sampler_InputTex, UV + int2(-1, 1) * texel, 0).xyz;
	samples[9] = InputTex.SampleLevel(sampler_InputTex, UV + int2(1, 1) * texel, 0).xyz;
	samples[10] = InputTex.SampleLevel(sampler_InputTex, UV + int2(-2, 2) * texel, 0).xyz;
	samples[11] = InputTex.SampleLevel(sampler_InputTex, UV + int2(0, 2) * texel, 0).xyz;
	samples[12] = InputTex.SampleLevel(sampler_InputTex, UV + int2(2, 2) * texel, 0).xyz;


	float3 filterSum = 0;
	filterSum += karisAverage(samples[3], samples[4], samples[8], samples[9]) * 0.5;
	filterSum += karisAverage(samples[0], samples[1], samples[5], samples[6]) * 0.125;
	filterSum += karisAverage(samples[1], samples[2], samples[6], samples[7]) * 0.125;
	filterSum += karisAverage(samples[5], samples[6], samples[10], samples[11]) * 0.125;
	filterSum += karisAverage(samples[6], samples[7], samples[11], samples[12]) * 0.125;

	float knee = 0.5f;

	OutputTex[id.xy] = float4(QuadraticThreshold(filterSum, 1, float3(1.0f - knee, knee * 2.0f, 0.25f / knee)), 1);

}


#pragma kernel Upsample
bool IsFinal;
float strength;
static float filterradius = 5;
[numthreads(16, 16, 1)]
void Upsample(uint3 id : SV_DispatchThreadID)
{
	if (id.x > (uint)TargetWidth || id.y > (uint)TargetHeight) return;
	static float2 texel = 1.0f / float2(TargetWidth, TargetHeight);
	float2 UV = ((float2)id.xy + 0.5f) * texel;

	float4 rgba = OrigTex.SampleLevel(sampler_OrigTex, UV, 0);
	float4 blurSum = 0;
	float x = filterradius * texel.x;
	float y = filterradius * texel.y;
	float3 a = InputTex.SampleLevel(sampler_InputTex, float2(UV.x - x, UV.y + y), 0).rgb;
	float3 b = InputTex.SampleLevel(sampler_InputTex, float2(UV.x, UV.y + y), 0).rgb;
	float3 c = InputTex.SampleLevel(sampler_InputTex, float2(UV.x + x, UV.y + y), 0).rgb;

	float3 d = InputTex.SampleLevel(sampler_InputTex, float2(UV.x - x, UV.y), 0).rgb;
	float3 e = InputTex.SampleLevel(sampler_InputTex, float2(UV.x, UV.y), 0).rgb;
	float3 f = InputTex.SampleLevel(sampler_InputTex, float2(UV.x + x, UV.y), 0).rgb;

	float3 g = InputTex.SampleLevel(sampler_InputTex, float2(UV.x - x, UV.y - y), 0).rgb;
	float3 h = InputTex.SampleLevel(sampler_InputTex, float2(UV.x, UV.y - y), 0).rgb;
	float3 i = InputTex.SampleLevel(sampler_InputTex, float2(UV.x + x, UV.y - y), 0).rgb;
	float3 upsample = e * 4.0;
	upsample += (b + d + f + h) * 2.0;
	upsample += (a + c + g + i);
	upsample *= 1.0 / 16.0;
	rgba += float4(upsample * rcp(strength / 10.0f), 0);


	OutputTex[id.xy] = float4(rgba.xyz, 1);

}
