#include "UnityCG.cginc"
#include "../../GlobalDefines.cginc"

int screen_width;
int screen_height;

int AtrousIterations;

int PartialRenderingFactor;

struct ColData {
	float3 throughput;
	float3 Direct;
	float3 Indirect;
	uint PrimaryNEERay;
	int IsSpecular;
	float pad;
};
StructuredBuffer<ColData> PerPixelRadiance;

Texture2D<half4> DirectB;
Texture2D<half4> IndirectB;
RWTexture2D<half4> DirectA;
RWTexture2D<half4> IndirectA;
RWTexture2D<float4> Result;

Texture2D<half4> TempAlbedoTex;



Texture2D<float4> ScreenSpaceInfo;
Texture2D<float4> PrevScreenSpaceInfo;

RWTexture2D<float4> MomentA;
Texture2D<float4> MomentB;

RWTexture2D<half> HistoryTex;

Texture2D<uint4> WorldPosData;

float3 unpackRGBE(uint x)
{
    int exponent = int(x >> 27) - 20;
    float scale = pow(2, exponent) / 256.0;

    float3 v;
    v.r = float(x & 0x1ff) * scale;
    v.g = float((x >> 9) & 0x1ff) * scale;
    v.b = float((x >> 18) & 0x1ff) * scale;

    return v;
}

float3 i_octahedral_32( uint data ) {
    uint2 iv = uint2( data, data>>16u ) & 65535u; 
    float2 v = float2(iv)/32767.5f - 1.0f;
    float3 nor = float3(v, 1.0f - abs(v.x) - abs(v.y)); // Rune Stubbe's version,
    float t = max(-nor.z,0.0);                     // much faster than original
    nor.x += (nor.x>0.0)?-t:t;                     // implementation of this
    nor.y += (nor.y>0.0)?-t:t;                     // technique
    return normalize( nor );
}
SamplerState my_linear_clamp_sampler;

#define THRESHOLD_NORMAL 0.7f;
#define THRESHOLD_DEPTH 0.1f;
#pragma kernel kernel_copy

float FarPlane;
#ifdef HDRP
	Texture2DArray<float4> MotionVectors;
#else
	Texture2D<float4> MotionVectors;
#endif

[numthreads(16, 16, 1)]
void kernel_copy(int3 id : SV_DispatchThreadID)
{//Reprojects and moves the color data from the array to textures
	if (id.x >= screen_width || id.y >= screen_height) return;
	int pixel_index = id.y * screen_width + id.x;

	ColData Pixel = PerPixelRadiance[pixel_index];

	float3 TexBaseColor = TempAlbedoTex[id.xy].xyz;
	TexBaseColor = (TexBaseColor > 0.005f ? rcp(TexBaseColor) : 0);
	// uint Input = asuint(Pixel.Metallic);

	float3 WorldAlbedo = unpackRGBE(WorldPosData[id.xy].w);

	IndirectA[id.xy] = float4(clamp(Pixel.Indirect * ((TempAlbedoTex[id.xy].xyz * ((WorldAlbedo > 0.001f) ? rcp(WorldAlbedo) : 0))),0,1200.0f),1);
	DirectA[id.xy] = float4(clamp((Pixel.Direct + unpackRGBE(Pixel.PrimaryNEERay) * ((Pixel.IsSpecular != 2) ? TexBaseColor : TexBaseColor)) * TempAlbedoTex[id.xy].xyz * ((WorldAlbedo > 0.001f) ? rcp(WorldAlbedo) : 0),0,1200.0f), 0);

}


inline float luminance(const float r, const float g, const float b) {
	return 0.299f * r + 0.587f * g + 0.114f * b;
}




inline bool is_tap_consistent(int x, int y, const float3 normal, float depth) {
	if (y < 0 || y >= screen_height || x < 0 || x >= screen_width)  return false;

	float3 prev_normal = i_octahedral_32(asuint(PrevScreenSpaceInfo[int2(x, y)].x));
	float  prev_depth = PrevScreenSpaceInfo[int2(x, y)].z;

	bool consistent_normal = dot(normal, prev_normal) > THRESHOLD_NORMAL;
	bool consistent_depth = abs(depth - prev_depth) / abs(depth) < THRESHOLD_DEPTH;

	return consistent_normal && consistent_depth;
}



#pragma kernel kernel_reproject
bool UseReSTIRGI;
[numthreads(16, 16, 1)]
void kernel_reproject(int3 id : SV_DispatchThreadID)
{
	if (id.x >= screen_width || id.y >= screen_height) return;


	float4 direct = DirectA[id.xy];
	float4 indirect = IndirectA[id.xy];

	float4 moment;
	moment.x = luminance(direct.x, direct.y, direct.z);
	moment.y = luminance(indirect.x, indirect.y, indirect.z);
	moment.z = moment.x * moment.x;
	moment.w = moment.y * moment.y;


	float3 normal = i_octahedral_32(asuint(ScreenSpaceInfo[id.xy].x));
	float depth = ScreenSpaceInfo[id.xy].z;
	// float depth_prev = HistoryNormalAndDepth[id.xy].w;

	#ifdef HDRP
		float2 motion = -MotionVectors.SampleLevel(my_linear_clamp_sampler, int3(id.xy,0) / float3(screen_width, screen_height, 1), 0).xy;
	#else
		float2 motion = -MotionVectors.SampleLevel(my_linear_clamp_sampler, id.xy / float2(screen_width, screen_height), 0).xy;
	#endif
	
	float2 screen_position_prev = ((((float2(id.xy)) * float2(rcp(screen_width), rcp(screen_height)) + motion)));// * float2(screen_width, screen_height)));

	if (depth == 0.0f) {
		DirectA[id.xy] = DirectB[id.xy];
		IndirectA[id.xy] = IndirectB[id.xy];
		return;
	};
    float u_prev = screen_position_prev.x;
    float v_prev = screen_position_prev.y;

    float s_prev = u_prev * (float)screen_width;
    float t_prev = v_prev * (float)screen_height;

    int x_prev = (int)(s_prev);
    int y_prev = (int)(t_prev);

    float fractional_s = s_prev - floor(s_prev);
    float fractional_t = t_prev - floor(t_prev);

    float one_minus_fractional_s = 1.0f - fractional_s;
    float one_minus_fractional_t = 1.0f - fractional_t;

    float w0 = one_minus_fractional_s * one_minus_fractional_t;
    float w1 =           fractional_s * one_minus_fractional_t;
    float w2 = one_minus_fractional_s *           fractional_t;
    float w3 = 1.0f - w0 - w1 - w2;

    float weights[4] = { w0, w1, w2, w3 };
    float consistent_weights_sum = 0.0f;
    float depth_prev;

    for (int j = 0; j < 2; j++) {
        for (int i = 0; i < 2; i++) {
            int tap = i + j * 2;

            if (is_tap_consistent(x_prev + i, y_prev + j, normal, depth)) {
                consistent_weights_sum += weights[tap];
            } else {
                weights[tap] = 0.0f;
            }
        }
    }

    float4 prev_direct   = float4(0.0f, 0.0f, 0.0f, 0.0f);
    float4 prev_indirect = float4(0.0f, 0.0f, 0.0f, 0.0f);
    float4 prev_moment   = float4(0.0f, 0.0f, 0.0f, 0.0f);

    // If we already found at least 1 consistent tap
    if (consistent_weights_sum > 0.0f) {
        // Add consistent taps using their bilinear weight
        for (int j = 0; j < 2; j++) {
            for (int i = 0; i < 2; i++) {
                int tap = i + j * 2;

                if (weights[tap] != 0.0f) {
                    int tap_x = x_prev + i;
                    int tap_y = y_prev + j;
                    int2 tap_index = int2(tap_x, tap_y);

                    float4 tap_direct   = DirectB  [tap_index];
                    float4 tap_indirect = IndirectB[tap_index];
                    float4 tap_moment   = MomentB[tap_index];

                    prev_direct   += weights[tap] * tap_direct;
                    prev_indirect += weights[tap] * tap_indirect;
                    prev_moment   += weights[tap] * tap_moment;
                }
            }
        }
    } else {
        // If we haven't yet found a consistent tap in a 2x2 region, try a 3x3 region
        for (int j = -1; j <= 1; j++) {
            for (int i = -1; i <= 1; i++) {
                int tap_x = x_prev + i;
                int tap_y = y_prev + j;

                if (is_tap_consistent(tap_x, tap_y, normal, depth)) {
                    int2 tap_index = int2(tap_x, tap_y);

                    prev_direct   += DirectB  [tap_index];
                    prev_indirect += IndirectB[tap_index];
                    prev_moment   += MomentB  [tap_index];

                    consistent_weights_sum += 1.0f;
                }
            }
        }
    }


	





	float History = 0; // Increase History Length by 1 step//whyh are we reading from id.xy, not prevpos?
	if (consistent_weights_sum > 1e-6) {
		// Normalize
		prev_direct /= consistent_weights_sum;
		prev_indirect /= consistent_weights_sum;
		prev_moment /= consistent_weights_sum;
		//consistent_weights_sum = max(consistent_weights_sum, 0.1f);
		History = HistoryTex[int2(x_prev, y_prev)] + 1.0f; // Increase History Length by 1 step//whyh are we reading from id.xy, not prevpos?
	
		// history = min(history,10);
		// HistoryTex[id.xy] = history;


		float inv_history = rcp((float)(History));
		float alpha_colour = max(0.05f, inv_history);
		float alpha_moment = max(0.2f, inv_history);

		// Integrate using exponential moving average
		direct = lerp(prev_direct, direct, alpha_colour);
		indirect = lerp(prev_indirect, indirect, alpha_colour);
		moment = lerp(prev_moment, moment, alpha_moment);
		if (History >= 4) {
			History *= clamp(exp2(-abs((moment.z - moment.x * moment.x) - (prev_moment.z - prev_moment.x * prev_moment.x))),0.5f,1.0f);
			float variance_direct = max(0.0f, moment.z - moment.x * moment.x);
			float variance_indirect = max(0.0f, moment.w - moment.y * moment.y);

			// Store the Variance in the alpha channels
			direct.w = variance_direct;
			indirect.w = variance_indirect;
		}
	}
	else {

		direct.w = 1.0f;
		indirect.w = 1.0f;
	}
	HistoryTex[id.xy] = History; // Reset History Length
	DirectA[id.xy] = direct;
	IndirectA[id.xy] = indirect;

	MomentA[id.xy] = moment;

}


#pragma kernel kernel_variance


#define epsilon 0.000000001f
static float sigma_z = 4.0f;
static float sigma_n = 128.0f;
static float sigma_l = 10.0f;
static float sigma_l_square = 100.0f;
static float luminance_denom = 0.8f;

inline float2 edge_stopping_weights(
	int delta_x,
	int delta_y,
	const float2 center_depth_gradient,
	float center_depth,
	float depth,
	const float3 center_normal,
	const float3 normal,
	float center_luminance_direct,
	float center_luminance_indirect,
	float luminance_direct,
	float luminance_indirect,
	float luminance_denom_direct,
	float luminance_denom_indirect,
	int2 Offset,
	float StepSize
) {
	// ∇z(p)·(p−q) (Actually the negative of this but we take its absolute value)
	float d =
		center_depth_gradient.x * (float)delta_x +
		center_depth_gradient.y * (float)delta_y;

	float ln_w_z = abs(center_depth - depth) / (sigma_z * abs(d) + epsilon);
	// float ln_w_z = 0.1f / (sigma_z + epsilon);

	float w_n = pow(max(0.0f, dot(center_normal, normal)), sigma_n);

	float w_l_direct = w_n * exp2(-abs(center_luminance_direct - luminance_direct) * luminance_denom_direct - ln_w_z);
	float w_l_indirect = w_n * exp2(-abs(center_luminance_indirect - luminance_indirect) * luminance_denom_indirect - ln_w_z);

	return float2(w_l_direct, w_l_indirect);
}

[numthreads(16, 16, 1)]
void kernel_variance(int3 id : SV_DispatchThreadID)
{
	if (id.x >= screen_width || id.y >= screen_height) return;
	int history = HistoryTex[id.xy].x;

	if (history >= 4) {
		DirectA[id.xy] = DirectB[id.xy];
		IndirectA[id.xy] = IndirectB[id.xy];
		return;
	}

	float4 center_color_direct = DirectB[id.xy];
	float4 center_color_indirect = IndirectB[id.xy];

	float4 center_luminence_direct = luminance(center_color_direct.x, center_color_direct.y, center_color_direct.z);
	float4 center_luminence_indirect = luminance(center_color_indirect.x, center_color_indirect.y, center_color_indirect.z);

	float3 CenterNormal = i_octahedral_32(asuint(ScreenSpaceInfo[id.xy].x));
	float CenterDepth = ScreenSpaceInfo[id.xy].z;

	float2 center_depth_gradient = float2(
		ScreenSpaceInfo[int2(id.x + 1, id.y)].z - CenterDepth,
		ScreenSpaceInfo[int2(id.x, id.y + 1)].z - CenterDepth);

	if (CenterDepth == 0.0f) {
		DirectA[id.xy] = DirectB[id.xy];
		IndirectA[id.xy] = IndirectB[id.xy];
		return;
	}


	float sum_weight_direct = 1.0f;
	float sum_weight_indirect = 1.0f;

	float4 sum_colour_direct = center_color_direct;
	float4 sum_colour_indirect = center_color_indirect;

	float4 sum_moment = float4(0.0f, 0.0f, 0.0f, 0.0f);


	int2 tap_index;
	[unroll] for (int j = -3; j <= 3; j++) {
		int tap_y = id.y + j;

		if (tap_y < 0 || tap_y >= screen_height) continue;

		[unroll] for (int i = -3; i <= 3; i++) {
			int tap_x = id.x + i;

			if (tap_x < 0 || tap_x >= screen_width) continue;

			if (i == 0 && j == 0) continue; // Center pixel is treated separately

			tap_index = int2(tap_x, tap_y);

			float4 colour_direct = DirectB[tap_index];
			float4 colour_indirect = IndirectB[tap_index];
			float4 moment = MomentB[tap_index];

			float luminance_direct = luminance(colour_direct.x, colour_direct.y, colour_direct.z);
			float luminance_indirect = luminance(colour_indirect.x, colour_indirect.y, colour_indirect.z);

			float2 w = edge_stopping_weights(
				i, j,
				center_depth_gradient,
				CenterDepth, ScreenSpaceInfo[tap_index].z,
				CenterNormal, i_octahedral_32(asuint(ScreenSpaceInfo[tap_index].x)),
				center_luminence_direct, center_luminence_indirect,
				luminance_direct, luminance_indirect,
				luminance_denom, luminance_denom,
				int2(i, j),
				1
			);

			float w_direct = w.x;
			float w_indirect = w.y;

			sum_weight_direct += w_direct;
			sum_weight_indirect += w_indirect;

			sum_colour_direct += w_direct * colour_direct;
			sum_colour_indirect += w_indirect * colour_indirect;

			sum_moment += moment * float4(w_direct, w_indirect, w_direct, w_indirect);
		}
	}


	sum_weight_direct = max(sum_weight_direct, 0.000001f);
	sum_weight_indirect = max(sum_weight_indirect, 0.000001f);

	sum_colour_direct /= sum_weight_direct;
	sum_colour_indirect /= sum_weight_indirect;

	sum_moment /= float4(sum_weight_direct, sum_weight_indirect, sum_weight_direct, sum_weight_indirect);

	sum_colour_direct.w = max(0.0f, sum_moment.z - sum_moment.x * sum_moment.x);
	sum_colour_indirect.w = max(0.0f, sum_moment.w - sum_moment.y * sum_moment.y);

	// Store the Variance in the alpha channel
	DirectA[id.xy] = clamp(sum_colour_direct,0,120.0f);
	IndirectA[id.xy] = clamp(sum_colour_indirect,0,120.0f);

}


#pragma kernel kernel_atrous

const static int feedback_iteration = 1;
uniform int step_size;

const static float kernel_gaussian[2][2] = {
	{ 1.0f / 1.0f, 1.0f / 2.0f  },
	{ 1.0f / 2.0f, 1.0f / 4.0f }
};

[numthreads(16, 16, 1)]
void kernel_atrous(int3 id : SV_DispatchThreadID)
{
	if (id.x >= screen_width || id.y >= screen_height) return;

	float variance_blurred_direct = 0.0f;
	float variance_blurred_indirect = 0.0f;
	int i, j, tap_x, tap_y;


	for (j = -1; j <= 1; j++) {
		tap_y = clamp(id.y + j, 0, screen_height - 1);
		[unroll]
		for (i = -1; i <= 1; i++) {
			tap_x = clamp(id.x + i, 0, screen_width - 1);
			// Read the Variance of Direct/Indirect Illumination
			// The Variance is stored in the alpha channel (w coordinate)
			float variance_direct = DirectB[int2(tap_x, tap_y)].w;
			float variance_indirect = IndirectB[int2(tap_x, tap_y)].w;

			float kernel_weight = kernel_gaussian[abs(i)][abs(j)];

			variance_blurred_direct += variance_direct * kernel_weight;
			variance_blurred_indirect += variance_indirect * kernel_weight;
		}
	}

	// Precompute denominators that are loop invariant
	const float luminance_denom_direct = rsqrt(sigma_l_square * max(0.0f, variance_blurred_direct) + epsilon);
	float luminance_denom_indirect = rsqrt(sigma_l_square * max(0.0f, variance_blurred_indirect) + epsilon);

	const float4 center_colour_direct = DirectB[id.xy];
	const float4 center_colour_indirect = IndirectB[id.xy];

	float center_luminance_direct = luminance(center_colour_direct.x, center_colour_direct.y, center_colour_direct.z);
	float center_luminance_indirect = luminance(center_colour_indirect.x, center_colour_indirect.y, center_colour_indirect.z);


	float3 center_normal = i_octahedral_32(asuint(ScreenSpaceInfo[id.xy].y));
	float  center_depth = ScreenSpaceInfo[id.xy].z;

	// Check if the pixel belongs to the Skybox
	if (center_depth == 0.0f) return;

	float2 center_depth_gradient = float2(
		ScreenSpaceInfo[int2(id.x + 1, id.y)].z - center_depth,
		ScreenSpaceInfo[int2(id.x, id.y + 1)].z - center_depth
		);

	float  sum_weight_direct = 1.0f;
	float  sum_weight_indirect = 1.0f;
	float4 sum_colour_direct = center_colour_direct;
	float4 sum_colour_indirect = center_colour_indirect;

	// Use a 3x3 box filter, as recommended in the A-SVGF paper
	const static int radius = 1;
	float4 color_direct;
	float4 color_indirect;
	float4 normal_and_depth;
	for (j = -radius; j <= radius; j++) {
		tap_y = j * ceil(step_size * abs(1.0f - abs(center_depth_gradient.y))) + id.y;//these ceils and such could be weird

		// if (tap_y < 0 || tap_y >= screen_height) continue;
		[unroll]
		for (i = -radius; i <= radius; i++) {
			tap_x = i * ceil(step_size * abs(1.0f - abs(center_depth_gradient.x))) + id.x;

			// if (tap_x < 0 || tap_x >= screen_width) continue;
			if(i == 0 && j == 0) continue;

			color_direct = DirectB[int2(tap_x, tap_y)];
			color_indirect = IndirectB[int2(tap_x, tap_y)];

			float luminance_direct = luminance(color_direct.x, color_direct.y, color_direct.z);
			float luminance_indirect = luminance(color_indirect.x, color_indirect.y, color_indirect.z);


			float3 normal = i_octahedral_32(asuint(ScreenSpaceInfo[int2(tap_x, tap_y)].y));
			float depth = ScreenSpaceInfo[int2(tap_x, tap_y)].z;

			float2 w = edge_stopping_weights(
				i * step_size,
				j * step_size,
				center_depth_gradient,
				center_depth, depth,
				center_normal, normal,
				center_luminance_direct, center_luminance_indirect,
				luminance_direct, luminance_indirect,
				luminance_denom_direct, luminance_denom_indirect,
				int2(i, j),
				step_size
			);

			float weight_direct = w.x;
			float weight_indirect = w.y;

			sum_weight_direct += weight_direct;
			sum_weight_indirect += weight_indirect;

			// Filter Colour using the weights, filter Variance using the square of the weights
			sum_colour_direct += float4(weight_direct, weight_direct, weight_direct, weight_direct * weight_direct) * color_direct;
			sum_colour_indirect += float4(weight_indirect, weight_indirect, weight_indirect, weight_indirect * weight_indirect) * color_indirect;
		}
	}

	float inv_sum_weight_direct = rcp(sum_weight_direct);
	float inv_sum_weight_indirect = rcp(sum_weight_indirect);

	// Normalize
	sum_colour_direct *= inv_sum_weight_direct;
	sum_colour_indirect *= inv_sum_weight_indirect;

	// Alpha channel contains Variance, and needs to be divided by the square of the weights
	sum_colour_direct.w *= inv_sum_weight_direct;
	sum_colour_indirect.w *= inv_sum_weight_indirect;

	DirectA[id.xy] = sum_colour_direct;
	IndirectA[id.xy] = sum_colour_indirect;
}



#pragma kernel kernel_finalize

bool DiffRes;

inline float luminance(const float3 a) {
	return dot(float3(0.299f, 0.587f, 0.114f), a);
}
#ifdef HDRP
	Texture2DArray<float4> DiffuseGBuffer;
	Texture2DArray<float4> SpecularGBuffer;
#else
	Texture2D<float4> DiffuseGBuffer;
	Texture2D<float4> SpecularGBuffer;
#endif

[numthreads(16, 16, 1)]
void kernel_finalize(int3 id : SV_DispatchThreadID)
{
	if (id.x >= screen_width || id.y >= screen_height) return;
	int pixel_index = id.y * screen_width + id.x;
	float3 GBufferCol = 1;
	// if(DiffRes) {
	//     float2 UV = id.xy / float2(screen_width, screen_height);
	//     #ifdef HDRP
	//         float3 SpecularAlbedo = 0;//Albedo2[int3(ipos,0)].xyz;
	//         GBufferCol = ((DiffuseGBuffer.SampleLevel(my_linear_clamp_sampler, float3(UV, 0), 0).xyz + SpecularAlbedo) == 0) ? 1 : (DiffuseGBuffer.SampleLevel(my_linear_clamp_sampler, float3(UV, 0), 0).xyz + SpecularAlbedo);
	//     #else
	//         float3 SpecularAlbedo = SpecularGBuffer.SampleLevel(my_linear_clamp_sampler, UV, 0);
	//         GBufferCol = ((DiffuseGBuffer.SampleLevel(my_linear_clamp_sampler, UV, 0).xyz + SpecularAlbedo) == 0) ? 1 : ((DiffuseGBuffer.SampleLevel(my_linear_clamp_sampler, UV, 0).xyz + SpecularAlbedo));
	//     #endif
	// }
	float3 colour = TempAlbedoTex[id.xy].w <= 0 ? TempAlbedoTex[id.xy] : ((DirectB[id.xy].xyz + IndirectB[id.xy].xyz) * unpackRGBE(WorldPosData[id.xy].w));
	Result[id.xy] = float4(colour, 1);

}