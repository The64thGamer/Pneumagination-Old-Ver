#include "../../GlobalDefines.cginc"
Texture2D<half4> ColorIn;
SamplerState sampler_ColorIn;

RWTexture2D<half4> ColorOut;
RWTexture2D<float4> RWScreenPosPrev;

Texture2D<float4> ScreenPosPrev;
SamplerState sampler_ScreenPosPrev;

Texture2D<float4> PosTex;

int screen_width;
int screen_height;

int target_width;
int target_height;


float4x4 viewprojection;
float4x4 prevviewprojection;
#ifdef HDRP
	Texture2DArray<float4> MotionVectors;
	Texture2DArray<float4> DepthTex;
#else
	Texture2D<float4> MotionVectors;
	Texture2D<float4> DepthTex;
#endif
float FarPlane;


#pragma kernel kernel_taa_prepare
inline float luminance(const float r, const float g, const float b) {
	return 0.299f * r + 0.587f * g + 0.114f * b;
}

const static int2 offsets[4] = {
	int2(-1, -1),
	int2(1, 1),
	int2(-1, 1),
	int2(1, -1),
};

int2 get_rpx_offset(uint sample_i, uint frame_index) {

	const int2 reservoir_px_offset_base =
		offsets[frame_index & 3]
		+ offsets[(sample_i + (frame_index ^ 1)) & 3];

	return
		sample_i == 0
		? 0
		: int2(reservoir_px_offset_base)
		;
}
int Samples_Accumulated;
[numthreads(16, 16, 1)]
void kernel_taa_prepare(int3 id : SV_DispatchThreadID)
{
	if (id.x >= screen_width || id.y >= screen_height) return;
	//in = Result
	//out = ColorDirectOut


	float3 colour = ColorIn[id.xy].xyz;

	colour = colour / (1.0f + luminance(colour.x, colour.y, colour.z));

	// Convert to gamma space
	colour = sqrt(max(0.0f, colour));

	ColorOut[id.xy] = float4(colour, 1);
}


#pragma kernel kernel_taa

RWTexture2D<half4> TAAPrev;
Texture2D<half4> TAAPrevRead;

inline float3 rgb_to_ycocg(const float3 colour) {
	return float3(
		0.25f * colour.x + 0.5f * colour.y + 0.25f * colour.z,
		0.5f * colour.x - 0.5f * colour.z,
		-0.25f * colour.x + 0.5f * colour.y - 0.25f * colour.z
		);
}

inline float3 ycocg_to_rgb(const float3 colour) {
	return float3(
		saturate(colour.x + colour.y - colour.z),
		saturate(colour.x + colour.z),
		saturate(colour.x - colour.y - colour.z)
		);
}

float mitchell_netravali(float x) {
	const static float B = 1.0f / 3.0f;
	const static float C = 1.0f / 3.0f;

	x = abs(x);
	float x2 = x * x;
	float x3 = x2 * x;

	if (x < 1.0f) {
		return (1.0f / 6.0f) * ((12.0f - 9.0f * B - 6.0f * C) * x3 + (-18.0f + 12.0f * B + 6.0f * C) * x2 + (6.0f - 2.0f * B));
	}
	else if (x < 2.0f) {
		return (1.0f / 6.0f) * ((-B - 6.0f * C) * x3 + (6.0f * B + 30.0f * C) * x2 + (-12.0f * B - 48.0f * C) * x + (8.0f * B + 24.0f * C));
	}
	else {
		return 0.0f;
	}
}

static const float2 Offsets[] = {
	float2(0.500000f, 0.333333f),
	float2(0.250000f, 0.666667f),
	float2(0.750000f, 0.111111f),
	float2(0.125000f, 0.444444f),
	float2(0.625000f, 0.777778f),
	float2(0.375000f, 0.222222f),
	float2(0.875000f, 0.555556f),
	float2(0.062500f, 0.888889f),
	float2(0.562500f, 0.037037f),
	float2(0.312500f, 0.370370f),
	float2(0.812500f, 0.703704f),
	float2(0.187500f, 0.148148f),
	float2(0.687500f, 0.481481f),
	float2(0.437500f, 0.814815f),
	float2(0.937500f, 0.259259f),
	float2(0.031250f, 0.592593f)
};
SamplerState my_linear_clamp_sampler;


float4 TAAA(int2 id) {
	//in = Result
	//out = ColorDirectOut
	float4 colour = ColorIn[id.xy];

	if (Samples_Accumulated == 0) {
		// On the first frame the history buffer will be black,
		// in this case we don't perform temporal accumulation
		// ColorOut[id.xy] = colour;
		return float4(ycocg_to_rgb(ColorIn[id.xy].xyz), ColorIn[id.xy].w);
	}
	#ifdef HDRP
		float2 screen_position_prev = (id.xy / float2(screen_width, screen_height) - MotionVectors[int3(id.xy,0)].xy) * 2.0f - 1.0f;
	#else
		float2 screen_position_prev = (id.xy / float2(screen_width, screen_height) - MotionVectors.SampleLevel(my_linear_clamp_sampler, id.xy / float2(screen_width, screen_height), 0).xy) * 2.0f - 1.0f;
	#endif
	id.xy += (Offsets[Samples_Accumulated % 16] - 0.5f);// / float2(screen_width, screen_height);
	// Convert from [-1, 1] to [0, 1]
	float u_prev = 0.5f + 0.5f * screen_position_prev.x;
	float v_prev = 0.5f + 0.5f * screen_position_prev.y;

	float s_prev = u_prev * (float)(screen_width);
	float t_prev = v_prev * (float)(screen_height);

	int x_prev = (int)(s_prev);
	int y_prev = (int)(t_prev);

	float  sum_weight = 0.0f;
	float4 sum = float4(0.0f, 0.0f, 0.0f, 0.0f);

	for (int j = y_prev - 2; j < y_prev + 2; j++) {
		if (j < 0 || j >= screen_height) continue;

		for (int i = x_prev - 2; i < x_prev + 2; i++) {
			if (i < 0 || i >= screen_width) continue;

			float weight =
				mitchell_netravali((float)(i)-s_prev) *
				mitchell_netravali((float)(j)-t_prev);

			sum_weight += weight;
			sum += weight * TAAPrev[int2(i, j)];
		}
	}

	if (sum_weight > 0.0f) {
		float3 colour_curr = rgb_to_ycocg(float3(colour.xyz));
		float3 colour_prev = rgb_to_ycocg(float3(sum.xyz / sum_weight));

		float3 colour_avg = colour_curr;
		float3 colour_var = colour_curr * colour_curr;

		if (id.x >= 1) {
			if (id.y >= 1) {
				float3 f = rgb_to_ycocg(float3(ColorIn[int2(id.x - 1, id.y - 1)].xyz));

				colour_avg += f;
				colour_var += f * f;
			}

			float3 f = rgb_to_ycocg(float3(ColorIn[int2(id.x - 1, id.y)].xyz));

			colour_avg += f;
			colour_var += f * f;

			if (id.y < screen_height - 1) {
				float3 f = rgb_to_ycocg(float3(ColorIn[int2(id.x - 1, id.y + 1)].xyz));

				colour_avg += f;
				colour_var += f * f;
			}
		}

		if (id.y >= 1) {
			float3 f = rgb_to_ycocg(float3(ColorIn[int2(id.x, id.y - 1)].xyz));

			colour_avg += f;
			colour_var += f * f;
		}

		if (id.y < screen_height - 1) {
			float3 f = rgb_to_ycocg(float3(ColorIn[int2(id.x, id.y + 1)].xyz));

			colour_avg += f;
			colour_var += f * f;
		}

		if (id.x < screen_width - 1) {
			if (id.y >= 1) {
				float3 f = rgb_to_ycocg(float3(ColorIn[int2(id.x + 1, id.y - 1)].xyz));

				colour_avg += f;
				colour_var += f * f;
			}

			float3 f = rgb_to_ycocg(float3(ColorIn[int2(id.x + 1, id.y)].xyz));

			colour_avg += f;
			colour_var += f * f;

			if (id.y < screen_height - 1) {
				float3 f = rgb_to_ycocg(float3(ColorIn[int2(id.x + 1, id.y + 1)].xyz));

				colour_avg += f;
				colour_var += f * f;
			}
		}

		// Normalize the 9 taps
		colour_avg *= 1.0f / 9.0f;
		colour_var *= 1.0f / 9.0f;

		// Compute variance and standard deviation
		float3 sigma2 = colour_var - colour_avg * colour_avg;
		float3 sigma = float3(
			sqrt(max(0.0f, sigma2.x)),
			sqrt(max(0.0f, sigma2.y)),
			sqrt(max(0.0f, sigma2.z))
			);

		// Clamp based on average and standard deviation
		float3 colour_min = colour_avg - 1.25f * sigma;
		float3 colour_max = colour_avg + 1.25f * sigma;

		colour_prev = clamp(colour_prev, colour_min, colour_max);

		//      float contrast = length(colour_curr - colour_avg);

				// Integrate temporally
					float2 locpix = frac(float2(u_prev, v_prev)* float2(screen_width, screen_height));// * float2(screen_width, screen_height));

				float blend = abs(0.5f - locpix.x) + abs(0.5f - locpix.y);
		float ALPHA = 0.1f;//lerp(0.1f, 1.0f, blend);
		float3 integrated = ycocg_to_rgb(lerp(colour_prev, colour_curr, ALPHA));

		colour.x = integrated.x;
		colour.y = integrated.y;
		colour.z = integrated.z;
	}
	return colour;
}
#define EPS 1e-4

float3 rgb2ycocg(in float3 rgb)
{
    float co = rgb.r - rgb.b;
    float t = rgb.b + co / 2.0;
    float cg = rgb.g - t;
    float y = t + cg / 2.0;
    return float3(y, co, cg);
}


float3 ycocg2rgb(in float3 ycocg)
{
    float t = ycocg.r - ycocg.b / 2.0;
    float g = ycocg.b + t;
    float b = t - ycocg.g / 2.0;
    float r = ycocg.g + b;
    return float3(r, g, b);
}

float3 RGBtoYCoCg(float3 c)
{
    //return rgb2ycocg(c);
    return mul(float3x3(0.25, 0.5, -0.25, 0.5, 0, 0.5, 0.25, -0.5, -0.25), c);
}

float3 YCoCgToRGB(float3 c)
{
    //return ycocg2rgb(c);
    return mul(float3x3(1, 1, 1, 1, 0, -1, -1, 1, -1), c);
}



float4 SampleTextureCatmullRom(Texture2D<half4> tex, float2 texSize, float2 uv)
{
    // We're going to sample a a 4x4 grid of texels surrounding the target UV coordinate. We'll do this by rounding
    // down the sample location to get the exact center of our "starting" texel. The starting texel will be at
    // location [1, 1] in the grid, where [0, 0] is the top left corner.
    float2 samplePos = uv * texSize;
    float2 texPos1 = floor(samplePos - 0.5) + 0.5;

    // Compute the fractional offset from our starting texel to our original sample location, which we'll
    // feed into the Catmull-Rom spline function to get our filter weights.
    float2 f = samplePos - texPos1;

    // Compute the Catmull-Rom weights using the fractional offset that we calculated earlier.
    // These equations are pre-expanded based on our knowledge of where the texels will be located,
    // which lets us avoid having to evaluate a piece-wise function.
    float2 w0 = f * ( -0.5 + f * (1.0 - 0.5*f));
    float2 w1 = 1.0 + f * f * (-2.5 + 1.5*f);
    float2 w2 = f * ( 0.5 + f * (2.0 - 1.5*f) );
    float2 w3 = f * f * (-0.5 + 0.5 * f);
    
    // Work out weighting factors and sampling offsets that will let us use bilinear filtering to
    // simultaneously evaluate the middle 2 samples from the 4x4 grid.
    float2 w12 = w1 + w2;
    float2 offset12 = w2 / w12;

    // Compute the final UV coordinates we'll use for sampling the texture
    float2 texPos0 = texPos1 - 1.0f;
    float2 texPos3 = texPos1 + 2.0f;
    float2 texPos12 = texPos1 + offset12;

    texPos0 /= texSize;
    texPos3 /= texSize;
    texPos12 /= texSize;

    float4 result = 0;
    result += tex.SampleLevel(my_linear_clamp_sampler, float2(texPos0.x,  texPos0.y),0) * w0.x * w0.y;
    result += tex.SampleLevel(my_linear_clamp_sampler, float2(texPos12.x, texPos0.y),0) * w12.x * w0.y;
    result += tex.SampleLevel(my_linear_clamp_sampler, float2(texPos3.x,  texPos0.y),0) * w3.x * w0.y;

    result += tex.SampleLevel(my_linear_clamp_sampler, float2(texPos0.x,  texPos12.y),0) * w0.x * w12.y;
    result += tex.SampleLevel(my_linear_clamp_sampler, float2(texPos12.x, texPos12.y),0) * w12.x * w12.y;
    result += tex.SampleLevel(my_linear_clamp_sampler, float2(texPos3.x,  texPos12.y),0) * w3.x * w12.y;

    result += tex.SampleLevel(my_linear_clamp_sampler, float2(texPos0.x,  texPos3.y),0) * w0.x * w3.y;
    result += tex.SampleLevel(my_linear_clamp_sampler, float2(texPos12.x, texPos3.y),0) * w12.x * w3.y;
    result += tex.SampleLevel(my_linear_clamp_sampler, float2(texPos3.x,  texPos3.y),0) * w3.x * w3.y;

    return result;
}







[numthreads(16, 16, 1)]
void kernel_taa(int3 id : SV_DispatchThreadID)
{
	if (id.x >= screen_width || id.y >= screen_height) return;

		ColorOut[id.xy] = TAAA(id.xy);


}


#pragma kernel kernel_taa_finalize



[numthreads(16, 16, 1)]
void kernel_taa_finalize(int3 id : SV_DispatchThreadID)
{
	if (id.x >= screen_width || id.y >= screen_height) return;

	float4 color = ColorIn[id.xy];

	TAAPrev[id.xy] = color;

	color = color * color;

	color = color / (1.0f - luminance(color.x, color.y, color.z));

	ColorOut[id.xy] = color;


}



