// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#define LUT_DIMS 48
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture2D<float4> Input;
Texture3D<float4> LUT;
RWTexture2D<float4> Result;
SamplerState sampler_linear_clamp;

int ToneMapSelection;

int width;

inline float3 tony_mc_mapface(float3 stimulus) {
    // Apply a non-linear transform that the LUT is encoded with.
    const float3 encoded = stimulus / (stimulus + 1.0);

    // Align the encoded range to texel centers.
    const float3 uv = encoded * ((LUT_DIMS - 1.0) / LUT_DIMS) + 0.5 / LUT_DIMS;

    // Note: for OpenGL, do `uv.y = 1.0 - uv.y`

    return LUT.SampleLevel(sampler_linear_clamp, uv, 0);
}

static float gamma = 2.2;
float3 lumaBasedReinhardToneMapping(float3 color)
{
    color = pow(color, gamma);
    float luma = dot(color, float3(0.2126, 0.7152, 0.0722));
    float toneMappedLuma = luma / (1. + luma);
    color *= toneMappedLuma / luma;
    color = pow(color, 1. / gamma);
    return color;
}
float3 RomBinDaHouseToneMapping(float3 color)
{
    //color = pow(color, gamma);
    color = exp( -1.0 / ( 2.72*color + 0.15 ) );
    //color = pow(color, 1. / gamma);
    return color;
}

float3 Uncharted2ToneMapping(float3 color)
{
    float A = 0.15;
    float B = 0.50;
    float C = 0.10;
    float D = 0.20;
    float E = 0.02;
    float F = 0.30;
    float W = 11.2;
    float exposure = 2.;
    color *= exposure;
    color = ((color * (A * color + C * B) + D * E) / (color * (A * color + B) + D * F)) - E / F;
    float white = ((W * (A * W + C * B) + D * E) / (W * (A * W + B) + D * F)) - E / F;
    color /= white;
    //color = pow(color, float3(1. / gamma));
    return color;
}

float3 filmicToneMapping(float3 color)
{
    color = max(0., color - 0.004);
    color = (color * (6.2 * color + .5)) / (color * (6.2 * color + 1.7) + 0.06);
    color = pow(color, gamma);
    return color;
}


float3 ACESFilmicTonemap(float3 x) {
    float a = 2.51;
    float b = 0.03;
    float c = 2.43;
    float d = 0.59;
    float e = 0.14;
    return clamp((x * (a * x + b)) / (x * (c * x + d) + e), 0.0, 1.0);
}

float3 TonemapUchimura ( float3 v ) {
    const float P = 1.0f;  // max display brightness
    const float a = 1.0f;  // contrast
    const float m = 0.22f; // linear section start
    const float l = 0.4f;  // linear section length
    const float c = 1.33f; // black
    const float b = 0.0f;  // pedestal

    float l0 = ( ( P - m ) * l ) / a;
    float L0 = m - m / a;
    float L1 = m + ( 1.0f - m ) / a;
    float S0 = m + l0;
    float S1 = m + a * l0;
    float C2 = ( a * P ) / ( P - S1 );
    float CP = -C2 / P;

    float3 w0 = 1.0f - smoothstep( 0.0f, m, v );
    float3 w2 = step( m + l0, v );
    float3 w1 = 1.0f - w0 - w2;

    float3 T = m * pow(abs(v / m), c ) + b;
    float3 S = P - ( P - S1 ) * exp( CP * ( v - S0 ) );
    float3 L = m + a * ( v - m );

    return T * w0 + L * w1 + S * w2;
}

float3 HejlBurgess(float3 texColor) {
   texColor *= 1;  // Hardcoded Exposure Adjustment
   float3 x = max(0,texColor-0.004);
   float3 retColor = (x*(6.2*x+.5))/(x*(6.2*x+1.7)+0.06);
   return retColor;
}

struct ParamsLogC
{
    float cut;
    float a, b, c, d, e, f;
};

static const ParamsLogC LogC =
{
    0.011361, // cut
    5.555556, // a
    0.047996, // b
    0.244161, // c
    0.386036, // d
    5.301883, // e
    0.092819  // f
};

float LinearToLogC_Precise(half x)
{
    float o;
    if (x > LogC.cut)
        o = LogC.c * log10(LogC.a * x + LogC.b) + LogC.d;
    else
        o = LogC.e * x + LogC.f;
    return o;
}

inline float3 AgX(float3 stimulus) {
    // Apply a non-linear transform that the LUT is encoded with.
    const float3 encoded = stimulus;// / (stimulus + 1.0);

    // Align the encoded range to texel centers.
    float3 uv = encoded;

    // Note: for OpenGL, do `uv.y = 1.0 - uv.y`
    uv = float3(
        LinearToLogC_Precise(uv.x),
        LinearToLogC_Precise(uv.y),
        LinearToLogC_Precise(uv.z)
    )  * ((LUT_DIMS - 1.0) / LUT_DIMS) + 0.5 / LUT_DIMS;

    return LUT.SampleLevel(sampler_linear_clamp, uv, 0);
}

[numthreads(16,16,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    float3 result = Result[id.xy].xyz;//
    [branch]switch(ToneMapSelection) {
        case 0:
            result = tony_mc_mapface(result);
        break;
        case 1:
            result = ACESFilmicTonemap(result);
        break;
        case 2:
            result = TonemapUchimura(result);
        break;
        case 3:
            result = lumaBasedReinhardToneMapping(result);
        break;
        case 4:
            result = Uncharted2ToneMapping(result);
        break;
        case 5:
            result = AgX(result);
        break;
    };
    Result[id.xy] = float4(result, 1.0);
}




#pragma kernel LuminanceShader
RWTexture2D<float4> LuminanceTex;

[numthreads(16,16,1)]
void LuminanceShader (uint3 id : SV_DispatchThreadID)
{
        float3 inpColor = Result[id.xy].xyz;
        float highlights = sqrt(dot(clamp(ACESFilmicTonemap(inpColor * 2.0f), 0.0, 1.0), float3(0.1,0.7,0.2)));
        float midtones = sqrt(dot(clamp(ACESFilmicTonemap(inpColor), 0.0, 1.0), float3(0.1,0.7,0.2)));
        float shadows = sqrt(dot(clamp(ACESFilmicTonemap(inpColor * 0.5f), 0.0, 1.0), float3(0.1,0.7,0.2)));
        LuminanceTex[id.xy] = float4(highlights, midtones, shadows, 1);


}



#pragma kernel ExposureWeightShader
Texture2D<float4> DiffuseTex;
Texture2D<float4> tWeights;
Texture2D<float4> tExposures;
SamplerState my_trilinear_clamp_sampler;
int ScreenWidth;
int ScreenHeight;

[numthreads(16,16,1)]
void ExposureWeightShader (uint3 id : SV_DispatchThreadID)
{
    float3 diff = DiffuseTex.SampleLevel(my_trilinear_clamp_sampler, id.xy / float2(ScreenWidth, ScreenHeight), 0).xyz - 0.5f;
    float3 weights = exp(-0.5 * diff * diff * 1000.0f);
    weights /= dot(weights, 1.0) + 0.00001;
        Result[id.xy] = float4(weights, 1);
}


#pragma kernel BlendShader

[numthreads(16, 16, 1)]
void BlendShader(uint3 id : SV_DispatchThreadID)
{
    // Blend the exposures based on the blend weights.
    float3 weights = tWeights.SampleLevel(my_trilinear_clamp_sampler, id.xy / float2(ScreenWidth, ScreenHeight), 0).xyz;
    float3 exposures = tExposures.SampleLevel(my_trilinear_clamp_sampler, id.xy / float2(ScreenWidth, ScreenHeight), 0).xyz;
    weights /= dot(weights, 1.0) + 0.0001;
    Result[id.xy] = float4(dot(exposures * weights, 1.0).xxx, 1.0);
}


#pragma kernel BlendLapLaceShader
Texture2D<float4> tExposuresCoarser;
Texture2D<float4> tAccumSoFar;

[numthreads(16, 16, 1)]
void BlendLapLaceShader(uint3 id : SV_DispatchThreadID)
{
    float boostLocalContrast = 1;
    float accumSoFar = tAccumSoFar.SampleLevel(my_trilinear_clamp_sampler, id.xy / float2(ScreenWidth, ScreenHeight), 0).x;
    float3 laplacians = tExposures.SampleLevel(my_trilinear_clamp_sampler, id.xy / float2(ScreenWidth, ScreenHeight), 0).xyz - tExposuresCoarser.SampleLevel(my_trilinear_clamp_sampler, id.xy / float2(ScreenWidth, ScreenHeight), 0).xyz;
    float3 weights = tWeights.SampleLevel(my_trilinear_clamp_sampler, id.xy / float2(ScreenWidth, ScreenHeight), 0).xyz * (boostLocalContrast > 0.0 ? abs(laplacians) + 0.00001 : 1.0);
    weights /= dot(weights, 1.0) + 0.00001;
    float laplac = dot(laplacians, 1.0);
    Result[id.xy] = float4((accumSoFar + laplac).xxx, 1.0);
}

#pragma kernel FinalCombine
Texture2D<float4> tOrigionalMip;
Texture2D<float4> tOrigional;

[numthreads(16, 16, 1)]
void FinalCombine(uint3 id : SV_DispatchThreadID)
{
    float exposure = 1.0f;
    float momentX = 0.0;
    float momentY = 0.0;
    float momentX2 = 0.0;
    float momentXY = 0.0;
    float ws = 0.0;
    for (int dy = -1; dy <= 1; dy += 1) {
        for (int dx = -1; dx <= 1; dx += 1) {
            float x = tOrigionalMip.SampleLevel(my_trilinear_clamp_sampler, (id.xy + float2(dx, dy)) / float2(ScreenWidth, ScreenHeight), 0).y;
            float y = DiffuseTex.SampleLevel(my_trilinear_clamp_sampler, (id.xy + float2(dx, dy)) / float2(ScreenWidth, ScreenHeight), 0).x;
            float w = exp(-0.5 * float(dx * dx + dy * dy) / (0.7 * 0.7));
            momentX += x * w;
            momentY += y * w;
            momentX2 += x * x * w;
            momentXY += x * y * w;
            ws += w;
        }
    }
    momentX /= ws;
    momentY /= ws;
    momentX2 /= ws;
    momentXY /= ws;
    float A = (momentXY - momentX * momentY) / (max(momentX2 - momentX * momentX, 0.0) + 0.00001);
    float B = momentY - A * momentX;

    // Apply local exposure adjustment as a crude multiplier on all RGB channels.
    // This is... generally pretty wrong, but enough for the demo purpose.
    float3 texel = DiffuseTex.SampleLevel(my_trilinear_clamp_sampler,  (id.xy) / float2(ScreenWidth, ScreenHeight), 0).xyz;
    float3 texelOriginal = sqrt(max(ACESFilmicTonemap(tOrigional.SampleLevel(my_trilinear_clamp_sampler, (id.xy) / float2(ScreenWidth, ScreenHeight), 0).xyz * exposure), 0.0));
    float luminance = dot(texelOriginal.xyz, float3(0.1, 0.7, 0.2)) + 0.00001;
    float finalMultiplier = max(A * luminance + B, 0.0) / luminance;
    // This is a hack to prevent super dark pixels getting boosted by a lot and showing compression artifacts.
    float lerpToUnityThreshold = 0.007;
    finalMultiplier = luminance > lerpToUnityThreshold ? finalMultiplier :
        lerp(1.0, finalMultiplier, (luminance / lerpToUnityThreshold) * (luminance / lerpToUnityThreshold));
    float3 texelFinal = sqrt(max(ACESFilmicTonemap(tOrigional.SampleLevel(my_trilinear_clamp_sampler, (id.xy) / float2(ScreenWidth, ScreenHeight), 0).xyz * exposure * finalMultiplier), 0.0));
    Result[id.xy] = float4(texelFinal, 1.0);

}