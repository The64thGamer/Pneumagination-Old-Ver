#pragma kernel CombineTriBuffers

struct CudaTriangle {
	float3 pos0;
	float3 posedge1;
	float3 posedge2;

	uint3 norms;

	uint3 tans;

	float2 tex0;
	float2 texedge1;
	float2 texedge2;

	uint MatDat;
};

RWStructuredBuffer<CudaTriangle> OutCudaTriArray;

StructuredBuffer<CudaTriangle> InCudaTriArray;

uint Offset;
uint Count;

[numthreads(372, 1, 1)]
void CombineTriBuffers(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= Count)
		return;

	OutCudaTriArray[id.x + Offset] = InCudaTriArray[id.x];

}



#pragma kernel CombineNodeBuffers

struct BVHNode8DataCompressed {
	float3 node_0xyz;
	uint node_0w;
	uint node_1x;
	uint node_1y;
	uint node_1z;
	uint node_1w;
	uint node_2x;
	uint node_2y;
	uint node_2z;
	uint node_2w;
	uint node_3x;
	uint node_3y;
	uint node_3z;
	uint node_3w;
	uint node_4x;
	uint node_4y;
	uint node_4z;
	uint node_4w;
};

RWStructuredBuffer<BVHNode8DataCompressed> OutAggNodes;

StructuredBuffer<BVHNode8DataCompressed> InAggNodes;

[numthreads(372, 1, 1)]
void CombineNodeBuffers(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= Count)
		return;

	OutAggNodes[id.x + Offset] = InAggNodes[id.x];

}

#pragma kernel CombineLightBuffers

struct LightTriData {
	float3 pos0;
	float3 posedge1;
	float3 posedge2;
	uint TriTarget;
};

StructuredBuffer<LightTriData> LightTrianglesIn;
RWStructuredBuffer<LightTriData> LightTrianglesOut;

[numthreads(372, 1, 1)]
void CombineLightBuffers(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= Count)
		return;

	LightTrianglesOut[id.x + Offset] = LightTrianglesIn[id.x];

}