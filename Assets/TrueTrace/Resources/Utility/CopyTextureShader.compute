#define ASPM_GPU
#define ASPM_HLSL
#include "External/AMD_Compressonator/bcn_common_kernel.h"





#pragma kernel SingleInputPass
Texture2D<float4> AdditionTex;
SamplerState sampler_AdditionTex;
SamplerState sampler_point_clamp;

RWTexture2D<float4> Result;

float2 InputSize;
float2 Scale;
float2 Offset;
float2 OutputSize;
bool IsNormalMap;

float4 EncodeRGBM(float3 rgb )
{
    float maxRGB = max(rgb.x,max(rgb.g,rgb.b));
    float M =      maxRGB / 1.0f;
    M =            ceil(M * 255.0) / 255.0;
    return float4(rgb / (M * 1), M);
}


[numthreads(32,32,1)]
void SingleInputPass (uint3 id : SV_DispatchThreadID)
{
    if(any(id.xy >= (uint2)floor((InputSize) * Scale))) return;
    float4 Col = AdditionTex.SampleLevel(sampler_AdditionTex, (id.xy) / InputSize / Scale, 0);
    if(IsNormalMap) {
        float2 InputNormal;
        [branch]if(Col.r == 1) {
            InputNormal = Col.ag;
            InputNormal.y = InputNormal.y;
        } else {
            InputNormal = Col.rg;
            InputNormal.xy = InputNormal.xy;
        }
        InputNormal.y = 1.0f - InputNormal.y;
        Col = float4(InputNormal, 0, 0);
    }

    Col = EncodeRGBM(Col.xyz);


    Result[id.xy + floor(Offset * Scale)] = float4(pow(abs(Col.xyz), 0.4545f), Col.w);


}

#pragma kernel AddInputPass
uniform int OutputRead;
uniform int OutputWrite;
[numthreads(32,32,1)]
void AddInputPass (uint3 id : SV_DispatchThreadID)
{
    if(any(id.xy >= (uint2)floor((InputSize) * Scale))) return;
    float4 Col = Result[id.xy + floor(Offset * Scale)];
    Col.xyz = pow(Col.xyz, 2.2f) * Col.w;
    float A = AdditionTex.SampleLevel(sampler_point_clamp, (id.xy) / InputSize / Scale, 0)[OutputRead];

    switch(OutputWrite) {
        case 0:
            Col.x = A;
        break;
        case 1:
            Col.y = A;
        break;
        case 2:
            Col.z = A;
        break;
    }

    Col = EncodeRGBM(Col.xyz);

    Result[id.xy + floor(Offset * Scale)] = float4(pow(Col.xyz, 0.4545f), Col.w);


}

#pragma kernel SingleOutputPass

uint packUnormArb(float3 data2) {
    data2 = data2 * 0.5f + 0.5f;
    const uint4 bits = uint4(10, 10, 10, 0);
    const float4 data = float4(data2, 0);
    float4 mull = exp2(float4(bits)) - 1.0;

    uint4 shift = uint4(0, bits.x, bits.x + bits.y, bits.x + bits.y + bits.z);
    uint4 shifted = uint4(data * mull + 0.5) << shift;

    return shifted.x | shifted.y | shifted.z | shifted.w;
}

RWTexture2D<float> ResultSingle;
bool IsHeightmap;
[numthreads(32,32,1)]
void SingleOutputPass (uint3 id : SV_DispatchThreadID)
{
    if(any(id.xy >= (uint2)floor((InputSize) * Scale))) return;
    float A = AdditionTex.SampleLevel(sampler_point_clamp, (id.xy) / InputSize / Scale, 0)[OutputRead];
    ResultSingle[id.xy + floor(Offset * Scale)] = IsHeightmap ? A : pow(abs(A), 0.4545f);


}
#pragma kernel DoubleOutputPass
RWTexture2D<float2> ResultDouble;
[numthreads(32,32,1)]
void DoubleOutputPass (uint3 id : SV_DispatchThreadID)
{
    if(any(id.xy >= (uint2)floor((InputSize) * Scale))) return;
        float4 Col = AdditionTex.SampleLevel(sampler_point_clamp, (id.xy) / InputSize / Scale, 0);
        float2 InputNormal;
        [branch]if(Col.r == 1) {
            InputNormal = Col.ag;
        } else {
            InputNormal = Col.rg;
        }
            InputNormal.y = 1.0f - InputNormal.y;
        // InputNormal.y = 1.0f - InputNormal.y;
        ResultDouble[id.xy + floor(Offset * Scale)] = InputNormal;


}



#pragma kernel Compress
Texture2D<float4> _Source;
RWTexture2D<uint4> _Target;
RWTexture2D<half> Alpha;

void LoadTexelBlockRGBA(Texture2D tex, uint2 tid, out float3 rgb[16], out float alpha[16])
{
    uint2 coord = tid.xy << 2;
    for (uint i = 0; i < 16; ++i)
    {
        uint2 offs = uint2(i & 3, i >> 2);
        float4 pix = float4(tex[coord + offs].xyz * tex[coord + offs].w, Alpha[coord + offs].x);
        rgb[i] = pix.rgb;
        alpha[i] = pix.a;
    }
}

[numthreads(8,8,1)]
void Compress (uint2 dtid : SV_DispatchThreadID)
{
     float3 colors[16];
    float alphas[16];
    LoadTexelBlockRGBA(_Source, dtid, colors, alphas);
    uint4 block = CompressBlockBC3_UNORM(colors, alphas, 0.7f, true);
    _Target[dtid] = block;


}


#pragma kernel AlphaMap
Texture2D<half4> _Source2;
RWTexture2D<half4> _Target2;

[numthreads(32,32,1)]
void AlphaMap (uint2 id : SV_DispatchThreadID)
{
    float4 A = _Source2.SampleLevel(sampler_point_clamp, (id.xy) / InputSize / Scale, 0);
    _Target2[id.xy + floor(Offset * Scale)] = A;
}